# coding: utf-8

"""
    Api Documentation

    Api Documentation

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Risks(BaseModel):
    """
    Risks
    """ # noqa: E501
    expected_average_prosecutor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="expectedAverageProsecutor")
    expected_highest_prosecutor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="expectedHighestProsecutor")
    expected_marketer: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="expectedMarketer")
    initial_average_prosecutor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="initialAverageProsecutor")
    initial_highest_prosecutor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="initialHighestProsecutor")
    initial_marketer: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="initialMarketer")
    residual_average_prosecutor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="residualAverageProsecutor")
    residual_highest_prosecutor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="residualHighestProsecutor")
    residual_marketer: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="residualMarketer")
    __properties: ClassVar[List[str]] = ["expectedAverageProsecutor", "expectedHighestProsecutor", "expectedMarketer", "initialAverageProsecutor", "initialHighestProsecutor", "initialMarketer", "residualAverageProsecutor", "residualHighestProsecutor", "residualMarketer"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Risks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Risks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expectedAverageProsecutor": obj.get("expectedAverageProsecutor"),
            "expectedHighestProsecutor": obj.get("expectedHighestProsecutor"),
            "expectedMarketer": obj.get("expectedMarketer"),
            "initialAverageProsecutor": obj.get("initialAverageProsecutor"),
            "initialHighestProsecutor": obj.get("initialHighestProsecutor"),
            "initialMarketer": obj.get("initialMarketer"),
            "residualAverageProsecutor": obj.get("residualAverageProsecutor"),
            "residualHighestProsecutor": obj.get("residualHighestProsecutor"),
            "residualMarketer": obj.get("residualMarketer")
        })
        return _obj


