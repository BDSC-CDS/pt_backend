"""NOTE: Autogenerated. Do not edit the manually."""

import connexion
from typing import Dict
from typing import Tuple
from typing import Union
from inspect import getmembers, isfunction, ismethod


{{#imports}}{{import}}
{{/imports}}
from {{packageName}} import util


#from src.internal.api.controllers import {{classFilename}}
#controller_functions =  [func_tupple[0] for func_tupple in getmembers({{classFilename}}, isfunction)]
#needed_functions = [{{#operations}}{{#operation}}"{{operationId}}"{{^-last}}, {{/-last}}{{/operation}}{{/operations}}]
#for op in needed_functions:
#    if op not in controller_functions:
#        raise NotImplementedError("operation " + op + " is not implemented by src.internal.api.controllers.{{classFilename}}")

class {{#lambda.titlecase}}{{#lambda.camelcase}}{{classFilename}}{{/lambda.camelcase}}{{/lambda.titlecase}}:
    def __init__(self, controller):
        controller_functions =  [func_tupple[0] for func_tupple in getmembers(controller, ismethod)]
        needed_functions = [{{#operations}}{{#operation}}"{{operationId}}"{{^-last}}, {{/-last}}{{/operation}}{{/operations}}]
        for op in needed_functions:
            if op not in controller_functions:
                raise NotImplementedError("operation " + op + " is not implemented by provided controller")

        self.controller=controller
{{#operations}}
{{#operation}}


    def {{operationId}}(self, {{#allParams}}{{paramName}}: {{dataType}}{{^required}}=None{{/required}}{{^-last}}, {{/-last}}{{/allParams}}):
        """{{summary}}{{^summary}}{{operationId}}{{/summary}}

        {{notes}}

        {{#allParams}}
        :param {{paramName}}: {{description}}
            {{^isContainer}}
                {{#isPrimitiveType}}
        :type {{paramName}}: {{>param_type}}
                {{/isPrimitiveType}}
                {{#isUuid}}
        :type {{paramName}}: {{>param_type}}
                {{/isUuid}}
                {{^isPrimitiveType}}
                    {{#isFile}}
        :type {{paramName}}: werkzeug.datastructures.FileStorage
                    {{/isFile}}
                    {{^isFile}}
                        {{^isUuid}}
        :type {{paramName}}: dict | bytes
                        {{/isUuid}}
                    {{/isFile}}
                {{/isPrimitiveType}}
            {{/isContainer}}
            {{#isArray}}
                {{#items}}
                    {{#isPrimitiveType}}
        :type {{paramName}}: List[{{>param_type}}]
                    {{/isPrimitiveType}}
                    {{^isPrimitiveType}}
        :type {{paramName}}: list | bytes
                    {{/isPrimitiveType}}
                {{/items}}
            {{/isArray}}
            {{#isMap}}
                {{#items}}
                    {{#isPrimitiveType}}
        :type {{paramName}}: Dict[str, {{>param_type}}]
                    {{/isPrimitiveType}}
                    {{^isPrimitiveType}}
        :type {{paramName}}: dict | bytes
                    {{/isPrimitiveType}}
                {{/items}}
            {{/isMap}}
        {{/allParams}}

        :rtype: Union[{{returnType}}{{^returnType}}None{{/returnType}}, Tuple[{{returnType}}{{^returnType}}None{{/returnType}}, int], Tuple[{{returnType}}{{^returnType}}None{{/returnType}}, int, Dict[str, str]]
        """
        {{#allParams}}
            {{^isContainer}}
                {{#isDate}}
        {{paramName}} = util.deserialize_date({{paramName}})
                {{/isDate}}
                {{#isDateTime}}
        {{paramName}} = util.deserialize_datetime({{paramName}})
                {{/isDateTime}}
                {{^isPrimitiveType}}
                    {{^isFile}}
                        {{^isUuid}}
        if connexion.request.is_json:
            {{paramName}} = {{baseType}}{{^baseType}}{{#dataType}} {{.}}{{/dataType}}{{/baseType}}.from_dict(connexion.request.get_json())
                        {{/isUuid}}
                    {{/isFile}}
                {{/isPrimitiveType}}
            {{/isContainer}}
            {{#isArray}}
                {{#items}}
                    {{#isDate}}
        if connexion.request.is_json:
            {{paramName}} = [util.deserialize_date(s) for s in connexion.request.get_json()]
                    {{/isDate}}
                    {{#isDateTime}}
        if connexion.request.is_json:
            {{paramName}} = [util.deserialize_datetime(s) for s in connexion.request.get_json()]
                    {{/isDateTime}}
                    {{#complexType}}
        if connexion.request.is_json:
            {{paramName}} = [{{complexType}}.from_dict(d) for d in connexion.request.get_json()]
                    {{/complexType}}
                {{/items}}
            {{/isArray}}
            {{#isMap}}
                {{#items}}
                    {{#isDate}}
        if connexion.request.is_json:
            {{paramName}} = {k: util.deserialize_date(v) for k, v in connexion.request.get_json().items()}
                    {{/isDate}}
                    {{#isDateTime}}
        if connexion.request.is_json:
            {{paramName}} = {k: util.deserialize_datetime(v) for k, v in connexion.request.get_json().items()}
                    {{/isDateTime}}
                    {{#complexType}}
        if connexion.request.is_json:
            {{paramName}} = {k: {{baseType}}.from_dict(v) for k, v in connexion.request.get_json().items()}
                    {{/complexType}}
                {{/items}}
            {{/isMap}}
        {{/allParams}}

        return self.controller.{{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}})
    {{/operation}}
    {{/operations}}
