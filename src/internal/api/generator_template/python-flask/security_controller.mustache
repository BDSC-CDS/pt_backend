"""NOTE: Autogenerated. Do not edit the manually."""

from typing import List
from inspect import getmembers, isfunction

from src.internal.api.controllers import security_controller
controller_functions =  [func_tupple[0] for func_tupple in getmembers(security_controller, isfunction)]
needed_functions = [{{#authMethods}}"info_from_{{name}}"{{^-last}}, {{/-last}}{{/authMethods}}]
for op in needed_functions:
    if op not in controller_functions:
        raise NotImplementedError("operation " + op + " is not implemented by src.internal.api.controllers.security_controller")
{{#authMethods}}
{{#isOAuth}}

def info_from_{{name}}(token):
    """
    Validate and decode token.
    Returned value will be passed in 'token_info' parameter of your operation function, if there is one.
    'sub' or 'uid' will be set in 'user' parameter of your operation function, if there is one.
    'scope' or 'scopes' will be passed to scope validation function.

    :param token Token provided by Authorization header
    :type token: str
    :return: Decoded token information or None if token is invalid
    :rtype: dict | None
    """
    return security_controller.info_from_{{name}}(token)


def validate_scope_{{name}}(required_scopes, token_scopes):
    """
    Validate required scopes are included in token scope

    :param required_scopes Required scope to access called API
    :type required_scopes: List[str]
    :param token_scopes Scope present in token
    :type token_scopes: List[str]
    :return: True if access to called API is allowed
    :rtype: bool
    """
    return set(required_scopes).issubset(set(token_scopes))

{{/isOAuth}}
{{#isApiKey}}

def info_from_{{name}}(api_key, required_scopes):
    """
    Check and retrieve authentication information from api_key.
    Returned value will be passed in 'token_info' parameter of your operation function, if there is one.
    'sub' or 'uid' will be set in 'user' parameter of your operation function, if there is one.

    :param api_key API key provided by Authorization header
    :type api_key: str
    :param required_scopes Always None. Used for other authentication method
    :type required_scopes: None
    :return: Information attached to provided api_key or None if api_key is invalid or does not allow access to called API
    :rtype: dict | None
    """
    return security_controller.info_from_{{name}}(api_key, required_scopes)

{{/isApiKey}}
{{#isBasicBasic}}

def info_from_{{name}}(username, password, required_scopes):
    """
    Check and retrieve authentication information from basic auth.
    Returned value will be passed in 'token_info' parameter of your operation function, if there is one.
    'sub' or 'uid' will be set in 'user' parameter of your operation function, if there is one.

    :param username login provided by Authorization header
    :type username: str
    :param password password provided by Authorization header
    :type password: str
    :param required_scopes Always None. Used for other authentication method
    :type required_scopes: None
    :return: Information attached to user or None if credentials are invalid or does not allow access to called API
    :rtype: dict | None
    """
    return security_controller.info_from_{{name}}(username, password, required_scopes)

{{/isBasicBasic}}
{{#isBasicBearer}}

def info_from_{{name}}(token):
    """
    Check and retrieve authentication information from custom bearer token.
    Returned value will be passed in 'token_info' parameter of your operation function, if there is one.
    'sub' or 'uid' will be set in 'user' parameter of your operation function, if there is one.

    :param token Token provided by Authorization header
    :type token: str
    :return: Decoded token information or None if token is invalid
    :rtype: dict | None
    """
    return security_controller.info_from_{{name}}(token)

{{/isBasicBearer}}
{{/authMethods}}
