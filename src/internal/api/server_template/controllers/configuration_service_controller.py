"""NOTE: Autogenerated. Do not edit the manually."""

import connexion
from typing import Dict
from typing import Tuple
from typing import Union
from inspect import getmembers, isfunction, ismethod


from server_template.models.rpc_status import RpcStatus
from server_template.models.templatebackend_config import TemplatebackendConfig
from server_template.models.templatebackend_create_config_reply import TemplatebackendCreateConfigReply
from server_template.models.templatebackend_delete_config_reply import TemplatebackendDeleteConfigReply
from server_template.models.templatebackend_export_config_reply import TemplatebackendExportConfigReply
from server_template.models.templatebackend_get_configs_reply import TemplatebackendGetConfigsReply
from server_template import util


#from src.internal.api.controllers import configuration_service_controller
#controller_functions =  [func_tupple[0] for func_tupple in getmembers(configuration_service_controller, isfunction)]
#needed_functions = ["config_service_create_config", "config_service_delete_config", "config_service_export_config", "config_service_get_configs"]
#for op in needed_functions:
#    if op not in controller_functions:
#        raise NotImplementedError("operation " + op + " is not implemented by src.internal.api.controllers.configuration_service_controller")

class ConfigurationServiceController:
    def __init__(self, controller):
        #controller_functions =  [func_tupple[0] for func_tupple in getmembers(controller, ismethod)]
        #needed_functions = ["config_service_create_config", "config_service_delete_config", "config_service_export_config", "config_service_get_configs"]
        #for op in needed_functions:
        #    if op not in controller_functions:
        #        raise NotImplementedError("operation " + op + " is not implemented by provided controller")
        util.implements_interface(ConfigurationServiceController, controller)

        self.controller=controller


    def config_service_create_config(self, user, body: TemplatebackendConfig):
        """Create a configuration

        This endpoint creates a usconfigurationer

        :param body: 
        :type body: dict | bytes

        :rtype: Union[TemplatebackendCreateConfigReply, Tuple[TemplatebackendCreateConfigReply, int], Tuple[TemplatebackendCreateConfigReply, int, Dict[str, str]]
        """
        if connexion.request.is_json:
            body = TemplatebackendConfig.from_dict(connexion.request.get_json())

        return self.controller.config_service_create_config(user, body)


    def config_service_delete_config(self, user, id: int):
        """Deletes a config

        This endpoint deletes a config

        :param id: 
        :type id: int

        :rtype: Union[TemplatebackendDeleteConfigReply, Tuple[TemplatebackendDeleteConfigReply, int], Tuple[TemplatebackendDeleteConfigReply, int, Dict[str, str]]
        """

        return self.controller.config_service_delete_config(user, id)


    def config_service_export_config(self, user, id: int):
        """Export a configuration as json (SPHN Connector format)

        This endpoint returns the JSON of a configuration

        :param id: 
        :type id: int

        :rtype: Union[TemplatebackendExportConfigReply, Tuple[TemplatebackendExportConfigReply, int], Tuple[TemplatebackendExportConfigReply, int, Dict[str, str]]
        """

        return self.controller.config_service_export_config(user, id)


    def config_service_get_configs(self, user):
        """Get configuration files

        This endpoint returns the configuration files for a given user


        :rtype: Union[TemplatebackendGetConfigsReply, Tuple[TemplatebackendGetConfigsReply, int], Tuple[TemplatebackendGetConfigsReply, int, Dict[str, str]]
        """

        return self.controller.config_service_get_configs(user, )
