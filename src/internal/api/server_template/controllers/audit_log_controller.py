"""NOTE: Autogenerated. Do not edit the manually."""

import connexion
from typing import Dict
from typing import Tuple
from typing import Union
from inspect import getmembers, isfunction, ismethod


from server_template.models.rpc_status import RpcStatus
from server_template.models.templatebackend_get_logs_response import TemplatebackendGetLogsResponse
from server_template import util


#from src.internal.api.controllers import audit_log_controller
#controller_functions =  [func_tupple[0] for func_tupple in getmembers(audit_log_controller, isfunction)]
#needed_functions = ["audit_log_service_get_logs", "audit_log_service_get_logs_for_user"]
#for op in needed_functions:
#    if op not in controller_functions:
#        raise NotImplementedError("operation " + op + " is not implemented by src.internal.api.controllers.audit_log_controller")

class AuditLogController:
    def __init__(self, controller):
        #controller_functions =  [func_tupple[0] for func_tupple in getmembers(controller, ismethod)]
        #needed_functions = ["audit_log_service_get_logs", "audit_log_service_get_logs_for_user"]
        #for op in needed_functions:
        #    if op not in controller_functions:
        #        raise NotImplementedError("operation " + op + " is not implemented by provided controller")
        util.implements_interface(AuditLogController, controller)

        self.controller=controller


    def audit_log_service_get_logs(self, user, offset: int=None, limit: int=None, filters: str=None, sort_by: str=None):
        """Get logs

        Gets a list of logs.

        :param offset: 
        :type offset: int
        :param limit: 
        :type limit: int
        :param filters: 
        :type filters: str
        :param sort_by: 
        :type sort_by: str

        :rtype: Union[TemplatebackendGetLogsResponse, Tuple[TemplatebackendGetLogsResponse, int], Tuple[TemplatebackendGetLogsResponse, int, Dict[str, str]]
        """

        return self.controller.audit_log_service_get_logs(user, offset, limit, filters, sort_by)


    def audit_log_service_get_logs_for_user(self, user, userid: int, offset: int=None, limit: int=None, filters: str=None, sort_by: str=None):
        """Get logs for a user

        Gets logs for a specific user.

        :param userid: 
        :type userid: int
        :param offset: 
        :type offset: int
        :param limit: 
        :type limit: int
        :param filters: 
        :type filters: str
        :param sort_by: 
        :type sort_by: str

        :rtype: Union[TemplatebackendGetLogsResponse, Tuple[TemplatebackendGetLogsResponse, int], Tuple[TemplatebackendGetLogsResponse, int, Dict[str, str]]
        """

        return self.controller.audit_log_service_get_logs_for_user(user, userid, offset, limit, filters, sort_by)
