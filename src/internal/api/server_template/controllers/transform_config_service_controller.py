"""NOTE: Autogenerated. Do not edit the manually."""

import connexion
from typing import Dict
from typing import Tuple
from typing import Union
from inspect import getmembers, isfunction, ismethod


from server_template.models.api_http_body import ApiHttpBody
from server_template.models.rpc_status import RpcStatus
from server_template.models.templatebackend_create_transform_config_reply import TemplatebackendCreateTransformConfigReply
from server_template.models.templatebackend_create_transform_config_request import TemplatebackendCreateTransformConfigRequest
from server_template.models.templatebackend_delete_transform_config_reply import TemplatebackendDeleteTransformConfigReply
from server_template.models.templatebackend_export_transform_config_reply import TemplatebackendExportTransformConfigReply
from server_template.models.templatebackend_list_transform_configs_reply import TemplatebackendListTransformConfigsReply
from server_template import util


#from src.internal.api.controllers import transform_config_service_controller
#controller_functions =  [func_tupple[0] for func_tupple in getmembers(transform_config_service_controller, isfunction)]
#needed_functions = ["transform_config_service_create_transform_config", "transform_config_service_delete_transform_config", "transform_config_service_export_transform_config", "transform_config_service_export_transform_config_json", "transform_config_service_list_transform_configs"]
#for op in needed_functions:
#    if op not in controller_functions:
#        raise NotImplementedError("operation " + op + " is not implemented by src.internal.api.controllers.transform_config_service_controller")

class TransformConfigServiceController:
    def __init__(self, controller):
        #controller_functions =  [func_tupple[0] for func_tupple in getmembers(controller, ismethod)]
        #needed_functions = ["transform_config_service_create_transform_config", "transform_config_service_delete_transform_config", "transform_config_service_export_transform_config", "transform_config_service_export_transform_config_json", "transform_config_service_list_transform_configs"]
        #for op in needed_functions:
        #    if op not in controller_functions:
        #        raise NotImplementedError("operation " + op + " is not implemented by provided controller")
        util.implements_interface(TransformConfigServiceController, controller)

        self.controller=controller


    def transform_config_service_create_transform_config(self, user, body: TemplatebackendCreateTransformConfigRequest):
        """Create a transform configuration

        This endpoint creates a dataset transform configuration

        :param body: 
        :type body: dict | bytes

        :rtype: Union[TemplatebackendCreateTransformConfigReply, Tuple[TemplatebackendCreateTransformConfigReply, int], Tuple[TemplatebackendCreateTransformConfigReply, int, Dict[str, str]]
        """
        if connexion.request.is_json:
            body = TemplatebackendCreateTransformConfigRequest.from_dict(connexion.request.get_json())

        return self.controller.transform_config_service_create_transform_config(user, body)


    def transform_config_service_delete_transform_config(self, user, id: int):
        """Delete transform configuration

        This endpoint deletes a dataset transform configuration

        :param id: 
        :type id: int

        :rtype: Union[TemplatebackendDeleteTransformConfigReply, Tuple[TemplatebackendDeleteTransformConfigReply, int], Tuple[TemplatebackendDeleteTransformConfigReply, int, Dict[str, str]]
        """

        return self.controller.transform_config_service_delete_transform_config(user, id)


    def transform_config_service_export_transform_config(self, user, id: int):
        """Export transform configuration as a string

        This endpoint returns a JSON string of a transform configuration (SPHN Connector format)

        :param id: 
        :type id: int

        :rtype: Union[TemplatebackendExportTransformConfigReply, Tuple[TemplatebackendExportTransformConfigReply, int], Tuple[TemplatebackendExportTransformConfigReply, int, Dict[str, str]]
        """

        return self.controller.transform_config_service_export_transform_config(user, id)


    def transform_config_service_export_transform_config_json(self, user, id: int):
        """Export transform configuration as a JSON file 

        This endpoint returns a JSON file of a transform configuration (SPHN Connector format)

        :param id: 
        :type id: int

        :rtype: Union[ApiHttpBody, Tuple[ApiHttpBody, int], Tuple[ApiHttpBody, int, Dict[str, str]]
        """

        return self.controller.transform_config_service_export_transform_config_json(user, id)


    def transform_config_service_list_transform_configs(self, user, offset: int=None, limit: int=None):
        """List transform configurations

        This endpoint allows listing a user&#39;s dataset transform configurations

        :param offset: 
        :type offset: int
        :param limit: 
        :type limit: int

        :rtype: Union[TemplatebackendListTransformConfigsReply, Tuple[TemplatebackendListTransformConfigsReply, int], Tuple[TemplatebackendListTransformConfigsReply, int, Dict[str, str]]
        """

        return self.controller.transform_config_service_list_transform_configs(user, offset, limit)
