"""NOTE: Autogenerated. Do not edit the manually."""

import connexion
from typing import Dict
from typing import Tuple
from typing import Union
from inspect import getmembers, isfunction, ismethod


from server_template.models.rpc_status import RpcStatus
from server_template.models.templatebackend_delete_dataset_reply import TemplatebackendDeleteDatasetReply
from server_template.models.templatebackend_get_dataset_content_reply import TemplatebackendGetDatasetContentReply
from server_template.models.templatebackend_get_dataset_metadata_reply import TemplatebackendGetDatasetMetadataReply
from server_template.models.templatebackend_list_datasets_reply import TemplatebackendListDatasetsReply
from server_template.models.templatebackend_store_dataset_reply import TemplatebackendStoreDatasetReply
from server_template.models.templatebackend_store_dataset_request import TemplatebackendStoreDatasetRequest
from server_template.models.templatebackend_transform_dataset_reply import TemplatebackendTransformDatasetReply
from server_template.models.templatebackend_transform_dataset_request import TemplatebackendTransformDatasetRequest
from server_template import util


#from src.internal.api.controllers import dataset_controller
#controller_functions =  [func_tupple[0] for func_tupple in getmembers(dataset_controller, isfunction)]
#needed_functions = ["dataset_service_delete_dataset", "dataset_service_get_dataset_content", "dataset_service_get_dataset_metadata", "dataset_service_list_datasets", "dataset_service_store_dataset", "dataset_service_transform_dataset"]
#for op in needed_functions:
#    if op not in controller_functions:
#        raise NotImplementedError("operation " + op + " is not implemented by src.internal.api.controllers.dataset_controller")

class DatasetController:
    def __init__(self, controller):
        #controller_functions =  [func_tupple[0] for func_tupple in getmembers(controller, ismethod)]
        #needed_functions = ["dataset_service_delete_dataset", "dataset_service_get_dataset_content", "dataset_service_get_dataset_metadata", "dataset_service_list_datasets", "dataset_service_store_dataset", "dataset_service_transform_dataset"]
        #for op in needed_functions:
        #    if op not in controller_functions:
        #        raise NotImplementedError("operation " + op + " is not implemented by provided controller")
        util.implements_interface(DatasetController, controller)

        self.controller=controller


    def dataset_service_delete_dataset(self, user, id: int):
        """Deletes a dataset

        This endpoint deletes a dataset

        :param id: 
        :type id: int

        :rtype: Union[TemplatebackendDeleteDatasetReply, Tuple[TemplatebackendDeleteDatasetReply, int], Tuple[TemplatebackendDeleteDatasetReply, int, Dict[str, str]]
        """

        return self.controller.dataset_service_delete_dataset(user, id)


    def dataset_service_get_dataset_content(self, user, id: int, offset: int=None, limit: int=None):
        """Get Dataset Content

        This endpoint allow getting a specific user&#39;s Dataset Content

        :param id: 
        :type id: int
        :param offset: 
        :type offset: int
        :param limit: 
        :type limit: int

        :rtype: Union[TemplatebackendGetDatasetContentReply, Tuple[TemplatebackendGetDatasetContentReply, int], Tuple[TemplatebackendGetDatasetContentReply, int, Dict[str, str]]
        """

        return self.controller.dataset_service_get_dataset_content(user, id, offset, limit)


    def dataset_service_get_dataset_metadata(self, user, id: int):
        """Get Dataset Metadata

        This endpoint allow getting a specific user&#39;s Dataset Metadata

        :param id: 
        :type id: int

        :rtype: Union[TemplatebackendGetDatasetMetadataReply, Tuple[TemplatebackendGetDatasetMetadataReply, int], Tuple[TemplatebackendGetDatasetMetadataReply, int, Dict[str, str]]
        """

        return self.controller.dataset_service_get_dataset_metadata(user, id)


    def dataset_service_list_datasets(self, user, offset: int=None, limit: int=None):
        """List datasets

        This endpoint allows listing a user&#39;s datasets

        :param offset: 
        :type offset: int
        :param limit: 
        :type limit: int

        :rtype: Union[TemplatebackendListDatasetsReply, Tuple[TemplatebackendListDatasetsReply, int], Tuple[TemplatebackendListDatasetsReply, int, Dict[str, str]]
        """

        return self.controller.dataset_service_list_datasets(user, offset, limit)


    def dataset_service_store_dataset(self, user, body: TemplatebackendStoreDatasetRequest):
        """Store a dataset

        This endpoint stores a dataset

        :param body: 
        :type body: dict | bytes

        :rtype: Union[TemplatebackendStoreDatasetReply, Tuple[TemplatebackendStoreDatasetReply, int], Tuple[TemplatebackendStoreDatasetReply, int, Dict[str, str]]
        """
        if connexion.request.is_json:
            body = TemplatebackendStoreDatasetRequest.from_dict(connexion.request.get_json())

        return self.controller.dataset_service_store_dataset(user, body)


    def dataset_service_transform_dataset(self, user, body: TemplatebackendTransformDatasetRequest):
        """Transform a dataset

        This endpoint transforms a dataset

        :param body: 
        :type body: dict | bytes

        :rtype: Union[TemplatebackendTransformDatasetReply, Tuple[TemplatebackendTransformDatasetReply, int], Tuple[TemplatebackendTransformDatasetReply, int, Dict[str, str]]
        """
        if connexion.request.is_json:
            body = TemplatebackendTransformDatasetRequest.from_dict(connexion.request.get_json())

        return self.controller.dataset_service_transform_dataset(user, body)
