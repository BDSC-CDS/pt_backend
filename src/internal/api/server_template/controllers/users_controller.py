"""NOTE: Autogenerated. Do not edit the manually."""

import connexion
from typing import Dict
from typing import Tuple
from typing import Union
from inspect import getmembers, isfunction, ismethod


from server_template.models.rpc_status import RpcStatus
from server_template.models.templatebackend_create_user_reply import TemplatebackendCreateUserReply
from server_template.models.templatebackend_delete_user_reply import TemplatebackendDeleteUserReply
from server_template.models.templatebackend_get_user_me_reply import TemplatebackendGetUserMeReply
from server_template.models.templatebackend_get_user_reply import TemplatebackendGetUserReply
from server_template.models.templatebackend_reset_password_reply import TemplatebackendResetPasswordReply
from server_template.models.templatebackend_update_password_reply import TemplatebackendUpdatePasswordReply
from server_template.models.templatebackend_update_password_request import TemplatebackendUpdatePasswordRequest
from server_template.models.templatebackend_user import TemplatebackendUser
from server_template import util


#from src.internal.api.controllers import users_controller
#controller_functions =  [func_tupple[0] for func_tupple in getmembers(users_controller, isfunction)]
#needed_functions = ["user_service_create_user", "user_service_delete_user", "user_service_get_user", "user_service_get_user_me", "user_service_reset_password", "user_service_update_password"]
#for op in needed_functions:
#    if op not in controller_functions:
#        raise NotImplementedError("operation " + op + " is not implemented by src.internal.api.controllers.users_controller")

class UsersController:
    def __init__(self, controller):
        #controller_functions =  [func_tupple[0] for func_tupple in getmembers(controller, ismethod)]
        #needed_functions = ["user_service_create_user", "user_service_delete_user", "user_service_get_user", "user_service_get_user_me", "user_service_reset_password", "user_service_update_password"]
        #for op in needed_functions:
        #    if op not in controller_functions:
        #        raise NotImplementedError("operation " + op + " is not implemented by provided controller")
        util.implements_interface(UsersController, controller)

        self.controller=controller


    def user_service_create_user(self, user, body: TemplatebackendUser):
        """Create a user

        This endpoint creates a user

        :param body: 
        :type body: dict | bytes

        :rtype: Union[TemplatebackendCreateUserReply, Tuple[TemplatebackendCreateUserReply, int], Tuple[TemplatebackendCreateUserReply, int, Dict[str, str]]
        """
        if connexion.request.is_json:
            body = TemplatebackendUser.from_dict(connexion.request.get_json())

        return self.controller.user_service_create_user(user, body)


    def user_service_delete_user(self, user, id: int):
        """Delete a user

        This endpoint deletes a user

        :param id: 
        :type id: int

        :rtype: Union[TemplatebackendDeleteUserReply, Tuple[TemplatebackendDeleteUserReply, int], Tuple[TemplatebackendDeleteUserReply, int, Dict[str, str]]
        """

        return self.controller.user_service_delete_user(user, id)


    def user_service_get_user(self, user, id: int):
        """Get a user

        This endpoint returns a user

        :param id: 
        :type id: int

        :rtype: Union[TemplatebackendGetUserReply, Tuple[TemplatebackendGetUserReply, int], Tuple[TemplatebackendGetUserReply, int, Dict[str, str]]
        """

        return self.controller.user_service_get_user(user, id)


    def user_service_get_user_me(self, user):
        """Get my own user

        This endpoint returns the details of the authenticated user


        :rtype: Union[TemplatebackendGetUserMeReply, Tuple[TemplatebackendGetUserMeReply, int], Tuple[TemplatebackendGetUserMeReply, int, Dict[str, str]]
        """

        return self.controller.user_service_get_user_me(user, )


    def user_service_reset_password(self, user, id: int, body: object):
        """Reset password

        This endpoint resets a user&#39;s password

        :param id: 
        :type id: int
        :param body: 
        :type body: 

        :rtype: Union[TemplatebackendResetPasswordReply, Tuple[TemplatebackendResetPasswordReply, int], Tuple[TemplatebackendResetPasswordReply, int, Dict[str, str]]
        """

        return self.controller.user_service_reset_password(user, id, body)


    def user_service_update_password(self, user, body: TemplatebackendUpdatePasswordRequest):
        """Update password

        This endpoint updates the password of the authenticated user

        :param body: 
        :type body: dict | bytes

        :rtype: Union[TemplatebackendUpdatePasswordReply, Tuple[TemplatebackendUpdatePasswordReply, int], Tuple[TemplatebackendUpdatePasswordReply, int, Dict[str, str]]
        """
        if connexion.request.is_json:
            body = TemplatebackendUpdatePasswordRequest.from_dict(connexion.request.get_json())

        return self.controller.user_service_update_password(user, body)
