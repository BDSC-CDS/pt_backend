"""NOTE: Autogenerated. Do not edit the manually."""

import connexion
from typing import Dict
from typing import Tuple
from typing import Union
from inspect import getmembers, isfunction, ismethod


from server_template.models.rpc_status import RpcStatus
from server_template.models.templatebackend_create_questionnaire_reply import TemplatebackendCreateQuestionnaireReply
from server_template.models.templatebackend_create_questionnaire_request import TemplatebackendCreateQuestionnaireRequest
from server_template.models.templatebackend_delete_questionnaire_reply import TemplatebackendDeleteQuestionnaireReply
from server_template.models.templatebackend_get_questionnaire_reply import TemplatebackendGetQuestionnaireReply
from server_template.models.templatebackend_get_reply_reply import TemplatebackendGetReplyReply
from server_template.models.templatebackend_list_questionnaire_reply import TemplatebackendListQuestionnaireReply
from server_template.models.templatebackend_list_replies_reply import TemplatebackendListRepliesReply
from server_template import util


#from src.internal.api.controllers import questionnaire_controller
#controller_functions =  [func_tupple[0] for func_tupple in getmembers(questionnaire_controller, isfunction)]
#needed_functions = ["questionnaire_service_create_questionnaire", "questionnaire_service_delete_questionnaire", "questionnaire_service_get_questionnaire", "questionnaire_service_get_reply", "questionnaire_service_list_questionnaire", "questionnaire_service_list_replies"]
#for op in needed_functions:
#    if op not in controller_functions:
#        raise NotImplementedError("operation " + op + " is not implemented by src.internal.api.controllers.questionnaire_controller")

class QuestionnaireController:
    def __init__(self, controller):
        #controller_functions =  [func_tupple[0] for func_tupple in getmembers(controller, ismethod)]
        #needed_functions = ["questionnaire_service_create_questionnaire", "questionnaire_service_delete_questionnaire", "questionnaire_service_get_questionnaire", "questionnaire_service_get_reply", "questionnaire_service_list_questionnaire", "questionnaire_service_list_replies"]
        #for op in needed_functions:
        #    if op not in controller_functions:
        #        raise NotImplementedError("operation " + op + " is not implemented by provided controller")
        util.implements_interface(QuestionnaireController, controller)

        self.controller=controller


    def questionnaire_service_create_questionnaire(self, user, body: TemplatebackendCreateQuestionnaireRequest):
        """Create a questionnaire

        This endpoint creates a questionnaire

        :param body: 
        :type body: dict | bytes

        :rtype: Union[TemplatebackendCreateQuestionnaireReply, Tuple[TemplatebackendCreateQuestionnaireReply, int], Tuple[TemplatebackendCreateQuestionnaireReply, int, Dict[str, str]]
        """
        if connexion.request.is_json:
            body = TemplatebackendCreateQuestionnaireRequest.from_dict(connexion.request.get_json())

        return self.controller.questionnaire_service_create_questionnaire(user, body)


    def questionnaire_service_delete_questionnaire(self, user, id: str):
        """Create a questionnaire

        This endpoint creates a questionnaire

        :param id: 
        :type id: str

        :rtype: Union[TemplatebackendDeleteQuestionnaireReply, Tuple[TemplatebackendDeleteQuestionnaireReply, int], Tuple[TemplatebackendDeleteQuestionnaireReply, int, Dict[str, str]]
        """

        return self.controller.questionnaire_service_delete_questionnaire(user, id)


    def questionnaire_service_get_questionnaire(self, user, id: int):
        """Get questionnaires

        This endpoint allow getting a single user&#39;s questionnaire

        :param id: 
        :type id: int

        :rtype: Union[TemplatebackendGetQuestionnaireReply, Tuple[TemplatebackendGetQuestionnaireReply, int], Tuple[TemplatebackendGetQuestionnaireReply, int, Dict[str, str]]
        """

        return self.controller.questionnaire_service_get_questionnaire(user, id)


    def questionnaire_service_get_reply(self, user, questionnaire_version_id: int, reply_id: int):
        """Get a questionnaires reply

        This endpoint allows getting a user&#39;s questionnaires reply

        :param questionnaire_version_id: 
        :type questionnaire_version_id: int
        :param reply_id: 
        :type reply_id: int

        :rtype: Union[TemplatebackendGetReplyReply, Tuple[TemplatebackendGetReplyReply, int], Tuple[TemplatebackendGetReplyReply, int, Dict[str, str]]
        """

        return self.controller.questionnaire_service_get_reply(user, questionnaire_version_id, reply_id)


    def questionnaire_service_list_questionnaire(self, user, offset: int=None, limit: int=None):
        """List questionnaires

        This endpoint allows listing a user&#39;s questionnaires

        :param offset: 
        :type offset: int
        :param limit: 
        :type limit: int

        :rtype: Union[TemplatebackendListQuestionnaireReply, Tuple[TemplatebackendListQuestionnaireReply, int], Tuple[TemplatebackendListQuestionnaireReply, int, Dict[str, str]]
        """

        return self.controller.questionnaire_service_list_questionnaire(user, offset, limit)


    def questionnaire_service_list_replies(self, user, questionnaire_version_id: int, offset: int=None, limit: int=None):
        """List questionnaires replies

        This endpoint allows listing a user&#39;s questionnaires replies

        :param questionnaire_version_id: 
        :type questionnaire_version_id: int
        :param offset: 
        :type offset: int
        :param limit: 
        :type limit: int

        :rtype: Union[TemplatebackendListRepliesReply, Tuple[TemplatebackendListRepliesReply, int], Tuple[TemplatebackendListRepliesReply, int, Dict[str, str]]
        """

        return self.controller.questionnaire_service_list_replies(user, questionnaire_version_id, offset, limit)
