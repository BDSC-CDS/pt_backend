"""NOTE: Autogenerated. Do not edit the manually."""

import connexion
from typing import Dict
from typing import Tuple
from typing import Union
from inspect import getmembers, isfunction, ismethod


from server_template.models.rpc_status import RpcStatus
from server_template.models.templatebackend_create_medication_reply import TemplatebackendCreateMedicationReply
from server_template.models.templatebackend_create_medication_request import TemplatebackendCreateMedicationRequest
from server_template.models.templatebackend_delete_medication_reply import TemplatebackendDeleteMedicationReply
from server_template.models.templatebackend_get_medication_reply import TemplatebackendGetMedicationReply
from server_template.models.templatebackend_list_medication_reply import TemplatebackendListMedicationReply
from server_template import util


#from src.internal.api.controllers import medication_controller
#controller_functions =  [func_tupple[0] for func_tupple in getmembers(medication_controller, isfunction)]
#needed_functions = ["medication_service_create_medication", "medication_service_delete_medication", "medication_service_get_medication", "medication_service_list_medication"]
#for op in needed_functions:
#    if op not in controller_functions:
#        raise NotImplementedError("operation " + op + " is not implemented by src.internal.api.controllers.medication_controller")

class MedicationController:
    def __init__(self, controller):
        #controller_functions =  [func_tupple[0] for func_tupple in getmembers(controller, ismethod)]
        #needed_functions = ["medication_service_create_medication", "medication_service_delete_medication", "medication_service_get_medication", "medication_service_list_medication"]
        #for op in needed_functions:
        #    if op not in controller_functions:
        #        raise NotImplementedError("operation " + op + " is not implemented by provided controller")
        util.implements_interface(MedicationController, controller)

        self.controller=controller


    def medication_service_create_medication(self, user, body: TemplatebackendCreateMedicationRequest):
        """Create a medication

        This endpoint creates a medication, and its schedule

        :param body: 
        :type body: dict | bytes

        :rtype: Union[TemplatebackendCreateMedicationReply, Tuple[TemplatebackendCreateMedicationReply, int], Tuple[TemplatebackendCreateMedicationReply, int, Dict[str, str]]
        """
        if connexion.request.is_json:
            body = TemplatebackendCreateMedicationRequest.from_dict(connexion.request.get_json())

        return self.controller.medication_service_create_medication(user, body)


    def medication_service_delete_medication(self, user, id: str):
        """Create a medication

        This endpoint creates a medication, and its schedule

        :param id: 
        :type id: str

        :rtype: Union[TemplatebackendDeleteMedicationReply, Tuple[TemplatebackendDeleteMedicationReply, int], Tuple[TemplatebackendDeleteMedicationReply, int, Dict[str, str]]
        """

        return self.controller.medication_service_delete_medication(user, id)


    def medication_service_get_medication(self, user, id: int):
        """Get medications

        This endpoint allow getting a single user&#39;s medication

        :param id: 
        :type id: int

        :rtype: Union[TemplatebackendGetMedicationReply, Tuple[TemplatebackendGetMedicationReply, int], Tuple[TemplatebackendGetMedicationReply, int, Dict[str, str]]
        """

        return self.controller.medication_service_get_medication(user, id)


    def medication_service_list_medication(self, user, offset: int=None, limit: int=None):
        """List medications

        This endpoint allows listing a user&#39;s medications

        :param offset: 
        :type offset: int
        :param limit: 
        :type limit: int

        :rtype: Union[TemplatebackendListMedicationReply, Tuple[TemplatebackendListMedicationReply, int], Tuple[TemplatebackendListMedicationReply, int, Dict[str, str]]
        """

        return self.controller.medication_service_list_medication(user, offset, limit)
