"""NOTE: Autogenerated. Do not edit the manually."""

import unittest

from flask import json

from server_template.models.rpc_status import RpcStatus
from server_template.models.templatebackend_create_questionnaire_reply import TemplatebackendCreateQuestionnaireReply
from server_template.models.templatebackend_create_questionnaire_request import TemplatebackendCreateQuestionnaireRequest
from server_template.models.templatebackend_delete_questionnaire_reply import TemplatebackendDeleteQuestionnaireReply
from server_template.models.templatebackend_get_questionnaire_reply import TemplatebackendGetQuestionnaireReply
from server_template.models.templatebackend_list_questionnaire_reply import TemplatebackendListQuestionnaireReply
from server_template.test import BaseTestCase


class TestQuestionnaireController(BaseTestCase):
    """QuestionnaireController integration test stubs"""

    def test_questionnaire_service_create_questionnaire(self):
        """Test case for questionnaire_service_create_questionnaire

        Create a questionnaire
        """
        body = server_template.TemplatebackendCreateQuestionnaireRequest()
        headers = { 
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/questionnaire',
            method='POST',
            headers=headers,
            data=json.dumps(body),
            content_type='application/json')
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_questionnaire_service_delete_questionnaire(self):
        """Test case for questionnaire_service_delete_questionnaire

        Create a questionnaire
        """
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/questionnaire/{id}'.format(id='id_example'),
            method='DELETE',
            headers=headers)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_questionnaire_service_get_questionnaire(self):
        """Test case for questionnaire_service_get_questionnaire

        Get questionnaires
        """
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/questionnaire/{id}'.format(id=56),
            method='GET',
            headers=headers)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_questionnaire_service_list_questionnaire(self):
        """Test case for questionnaire_service_list_questionnaire

        List questionnaires
        """
        query_string = [('offset', 56),
                        ('limit', 56)]
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/questionnaire',
            method='GET',
            headers=headers,
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))


if __name__ == '__main__':
    unittest.main()
