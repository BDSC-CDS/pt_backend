"""NOTE: Autogenerated. Do not edit the manually."""

import unittest

from flask import json

from server_template.models.api_http_body import ApiHttpBody
from server_template.models.rpc_status import RpcStatus
from server_template.models.templatebackend_change_types_dataset_reply import TemplatebackendChangeTypesDatasetReply
from server_template.models.templatebackend_change_types_dataset_request import TemplatebackendChangeTypesDatasetRequest
from server_template.models.templatebackend_delete_dataset_reply import TemplatebackendDeleteDatasetReply
from server_template.models.templatebackend_get_dataset_content_reply import TemplatebackendGetDatasetContentReply
from server_template.models.templatebackend_get_dataset_info_reply import TemplatebackendGetDatasetInfoReply
from server_template.models.templatebackend_get_dataset_jupyterhub_reply import TemplatebackendGetDatasetJupyterhubReply
from server_template.models.templatebackend_get_dataset_metadata_reply import TemplatebackendGetDatasetMetadataReply
from server_template.models.templatebackend_list_datasets_reply import TemplatebackendListDatasetsReply
from server_template.models.templatebackend_revert_dataset_reply import TemplatebackendRevertDatasetReply
from server_template.models.templatebackend_revert_dataset_request import TemplatebackendRevertDatasetRequest
from server_template.models.templatebackend_store_dataset_reply import TemplatebackendStoreDatasetReply
from server_template.models.templatebackend_store_dataset_request import TemplatebackendStoreDatasetRequest
from server_template.models.templatebackend_transform_dataset_reply import TemplatebackendTransformDatasetReply
from server_template.models.templatebackend_transform_dataset_request import TemplatebackendTransformDatasetRequest
from server_template.test import BaseTestCase


class TestDatasetServiceController(BaseTestCase):
    """DatasetServiceController integration test stubs"""

    def test_dataset_service_change_types_dataset(self):
        """Test case for dataset_service_change_types_dataset

        Change the types of a dataset
        """
        body = server_template.TemplatebackendChangeTypesDatasetRequest()
        headers = { 
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset/types',
            method='POST',
            headers=headers,
            data=json.dumps(body),
            content_type='application/json')
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_delete_dataset(self):
        """Test case for dataset_service_delete_dataset

        Deletes a dataset
        """
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset/{id}'.format(id=56),
            method='DELETE',
            headers=headers)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_get_dataset_content(self):
        """Test case for dataset_service_get_dataset_content

        Get Dataset Content
        """
        query_string = [('offset', 56),
                        ('limit', 56)]
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset/content/{id}'.format(id=56),
            method='GET',
            headers=headers,
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_get_dataset_csv(self):
        """Test case for dataset_service_get_dataset_csv

        Get Dataset CSVFile
        """
        query_string = [('offset', 56),
                        ('limit', 56)]
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset/csv/{id}'.format(id=56),
            method='GET',
            headers=headers,
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_get_dataset_dataframe(self):
        """Test case for dataset_service_get_dataset_dataframe

        Get Dataset Dataframe
        """
        query_string = [('offset', 56),
                        ('limit', 56)]
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset/dataframe/{id}'.format(id=56),
            method='GET',
            headers=headers,
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_get_dataset_identifier(self):
        """Test case for dataset_service_get_dataset_identifier

        Get Dataset Content filtered by identifying and quasi identifying columns
        """
        query_string = [('offset', 56),
                        ('limit', 56)]
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset/identifier/{id}'.format(id=56),
            method='GET',
            headers=headers,
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_get_dataset_info(self):
        """Test case for dataset_service_get_dataset_info

        Get Dataset Info
        """
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset/info/{id}'.format(id=56),
            method='GET',
            headers=headers)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_get_dataset_jupyterhub(self):
        """Test case for dataset_service_get_dataset_jupyterhub

        Get Dataset Jupyterhub
        """
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset/jupyterhub/{id}'.format(id=56),
            method='GET',
            headers=headers)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_get_dataset_metadata(self):
        """Test case for dataset_service_get_dataset_metadata

        Get Dataset Metadata
        """
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset/metadata/{id}'.format(id=56),
            method='GET',
            headers=headers)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_list_datasets(self):
        """Test case for dataset_service_list_datasets

        List datasets
        """
        query_string = [('offset', 56),
                        ('limit', 56)]
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset',
            method='GET',
            headers=headers,
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_revert_dataset(self):
        """Test case for dataset_service_revert_dataset

        Revert a dataset
        """
        body = server_template.TemplatebackendRevertDatasetRequest()
        headers = { 
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset/revert',
            method='POST',
            headers=headers,
            data=json.dumps(body),
            content_type='application/json')
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_store_dataset(self):
        """Test case for dataset_service_store_dataset

        Store a dataset
        """
        body = server_template.TemplatebackendStoreDatasetRequest()
        headers = { 
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset',
            method='POST',
            headers=headers,
            data=json.dumps(body),
            content_type='application/json')
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_transform_dataset(self):
        """Test case for dataset_service_transform_dataset

        Transform a dataset
        """
        body = server_template.TemplatebackendTransformDatasetRequest()
        headers = { 
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset/transform',
            method='POST',
            headers=headers,
            data=json.dumps(body),
            content_type='application/json')
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))


if __name__ == '__main__':
    unittest.main()
