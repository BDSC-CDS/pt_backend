"""NOTE: Autogenerated. Do not edit the manually."""

import unittest

from flask import json

from server_template.models.api_http_body import ApiHttpBody
from server_template.models.rpc_status import RpcStatus
from server_template.models.templatebackend_create_transform_config_reply import TemplatebackendCreateTransformConfigReply
from server_template.models.templatebackend_create_transform_config_request import TemplatebackendCreateTransformConfigRequest
from server_template.models.templatebackend_delete_transform_config_reply import TemplatebackendDeleteTransformConfigReply
from server_template.models.templatebackend_export_transform_config_reply import TemplatebackendExportTransformConfigReply
from server_template.models.templatebackend_list_transform_configs_reply import TemplatebackendListTransformConfigsReply
from server_template.test import BaseTestCase


class TestTransformConfigServiceController(BaseTestCase):
    """TransformConfigServiceController integration test stubs"""

    def test_transform_config_service_create_transform_config(self):
        """Test case for transform_config_service_create_transform_config

        Create a transform configuration
        """
        body = server_template.TemplatebackendCreateTransformConfigRequest()
        headers = { 
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/transform-config',
            method='POST',
            headers=headers,
            data=json.dumps(body),
            content_type='application/json')
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_transform_config_service_delete_transform_config(self):
        """Test case for transform_config_service_delete_transform_config

        Delete transform configuration
        """
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/transform-config/{id}'.format(id=56),
            method='DELETE',
            headers=headers)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_transform_config_service_export_transform_config(self):
        """Test case for transform_config_service_export_transform_config

        Export transform configuration as a string
        """
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/transform-config/export/{id}'.format(id=56),
            method='GET',
            headers=headers)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_transform_config_service_export_transform_config_json(self):
        """Test case for transform_config_service_export_transform_config_json

        Export transform configuration as a JSON file 
        """
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/transform-config/export/json/{id}'.format(id=56),
            method='GET',
            headers=headers)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_transform_config_service_list_transform_configs(self):
        """Test case for transform_config_service_list_transform_configs

        List transform configurations
        """
        query_string = [('offset', 56),
                        ('limit', 56)]
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/transform-config',
            method='GET',
            headers=headers,
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))


if __name__ == '__main__':
    unittest.main()
