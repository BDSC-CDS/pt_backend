"""NOTE: Autogenerated. Do not edit the manually."""

import unittest

from flask import json

from server_template.models.rpc_status import RpcStatus
from server_template.models.templatebackend_create_user_reply import TemplatebackendCreateUserReply
from server_template.models.templatebackend_delete_user_reply import TemplatebackendDeleteUserReply
from server_template.models.templatebackend_get_user_me_reply import TemplatebackendGetUserMeReply
from server_template.models.templatebackend_get_user_reply import TemplatebackendGetUserReply
from server_template.models.templatebackend_reset_password_reply import TemplatebackendResetPasswordReply
from server_template.models.templatebackend_update_password_reply import TemplatebackendUpdatePasswordReply
from server_template.models.templatebackend_update_password_request import TemplatebackendUpdatePasswordRequest
from server_template.models.templatebackend_user import TemplatebackendUser
from server_template.test import BaseTestCase


class TestUsersServiceController(BaseTestCase):
    """UsersServiceController integration test stubs"""

    def test_users_service_create_user(self):
        """Test case for users_service_create_user

        Create a user
        """
        body = server_template.TemplatebackendUser()
        headers = { 
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/rest/v1/users',
            method='POST',
            headers=headers,
            data=json.dumps(body),
            content_type='application/json')
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_users_service_delete_user(self):
        """Test case for users_service_delete_user

        Delete a user
        """
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/rest/v1/users/{id}'.format(id=56),
            method='DELETE',
            headers=headers)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_users_service_get_user(self):
        """Test case for users_service_get_user

        Get a user
        """
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/rest/v1/users/{id}'.format(id=56),
            method='GET',
            headers=headers)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_users_service_get_user_me(self):
        """Test case for users_service_get_user_me

        Get my own user
        """
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/rest/v1/users/me',
            method='GET',
            headers=headers)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_users_service_reset_password(self):
        """Test case for users_service_reset_password

        Reset password
        """
        body = None
        headers = { 
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/rest/v1/users/{id}/password/reset'.format(id=56),
            method='POST',
            headers=headers,
            data=json.dumps(body),
            content_type='application/json')
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_users_service_update_password(self):
        """Test case for users_service_update_password

        Update password
        """
        body = server_template.TemplatebackendUpdatePasswordRequest()
        headers = { 
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/rest/v1/users/me/password',
            method='PUT',
            headers=headers,
            data=json.dumps(body),
            content_type='application/json')
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))


if __name__ == '__main__':
    unittest.main()
