"""NOTE: Autogenerated. Do not edit the manually."""

import unittest

from flask import json

from server_template.models.rpc_status import RpcStatus
from server_template.models.templatebackend_delete_dataset_reply import TemplatebackendDeleteDatasetReply
from server_template.models.templatebackend_get_dataset_content_reply import TemplatebackendGetDatasetContentReply
from server_template.models.templatebackend_get_dataset_metadata_reply import TemplatebackendGetDatasetMetadataReply
from server_template.models.templatebackend_list_datasets_reply import TemplatebackendListDatasetsReply
from server_template.models.templatebackend_store_dataset_reply import TemplatebackendStoreDatasetReply
from server_template.models.templatebackend_store_dataset_request import TemplatebackendStoreDatasetRequest
from server_template.test import BaseTestCase


class TestDatasetController(BaseTestCase):
    """DatasetController integration test stubs"""

    def test_dataset_service_delete_dataset(self):
        """Test case for dataset_service_delete_dataset

        Deletes a dataset
        """
        query_string = [('name', 'name_example'),
                        ('userid', 56),
                        ('tenantid', 56)]
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset/{id}'.format(id=56),
            method='DELETE',
            headers=headers,
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_get_dataset_content(self):
        """Test case for dataset_service_get_dataset_content

        Get Dataset Content
        """
        query_string = [('name', 'name_example'),
                        ('userid', 56),
                        ('tenantid', 56),
                        ('offset', 56),
                        ('limit', 56)]
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset/content/{id}'.format(id=56),
            method='GET',
            headers=headers,
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_get_dataset_metadata(self):
        """Test case for dataset_service_get_dataset_metadata

        Get Dataset Metadata
        """
        query_string = [('name', 'name_example'),
                        ('userid', 56),
                        ('tenantid', 56)]
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset/metadata/{id}'.format(id=56),
            method='GET',
            headers=headers,
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_list_datasets(self):
        """Test case for dataset_service_list_datasets

        List datasets
        """
        query_string = [('userid', 56),
                        ('tenantid', 56),
                        ('offset', 56),
                        ('limit', 56)]
        headers = { 
            'Accept': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset',
            method='GET',
            headers=headers,
            query_string=query_string)
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))

    def test_dataset_service_store_dataset(self):
        """Test case for dataset_service_store_dataset

        Store a dataset
        """
        body = server_template.TemplatebackendStoreDatasetRequest()
        headers = { 
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Bearer': 'special-key',
        }
        response = self.client.open(
            '/api/v1/dataset',
            method='POST',
            headers=headers,
            data=json.dumps(body),
            content_type='application/json')
        self.assert200(response,
                       'Response body is : ' + response.data.decode('utf-8'))


if __name__ == '__main__':
    unittest.main()
