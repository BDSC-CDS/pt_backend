"""NOTE: Autogenerated. Do not edit the manually."""

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server_template.models.base_model import Model
from server_template.models.templatebackend_questionnaire_question_answer import TemplatebackendQuestionnaireQuestionAnswer
from server_template import util

from server_template.models.templatebackend_questionnaire_question_answer import TemplatebackendQuestionnaireQuestionAnswer

class TemplatebackendQuestionnaireQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, tab=None, question=None, risk_weight=None, answer_type=None, flag=None, tooltip=None, tmp_uuid=None, answers=None, created_at=None, updated_at=None):
        """TemplatebackendQuestionnaireQuestion - a model defined in OpenAPI

        :param id: The id of this TemplatebackendQuestionnaireQuestion.
        :type id: int
        :param tab: The tab of this TemplatebackendQuestionnaireQuestion.
        :type tab: str
        :param question: The question of this TemplatebackendQuestionnaireQuestion.
        :type question: str
        :param risk_weight: The risk_weight of this TemplatebackendQuestionnaireQuestion.
        :type risk_weight: int
        :param answer_type: The answer_type of this TemplatebackendQuestionnaireQuestion.
        :type answer_type: str
        :param flag: The flag of this TemplatebackendQuestionnaireQuestion.
        :type flag: str
        :param tooltip: The tooltip of this TemplatebackendQuestionnaireQuestion.
        :type tooltip: str
        :param tmp_uuid: The tmp_uuid of this TemplatebackendQuestionnaireQuestion.
        :type tmp_uuid: str
        :param answers: The answers of this TemplatebackendQuestionnaireQuestion.
        :type answers: List[TemplatebackendQuestionnaireQuestionAnswer]
        :param created_at: The created_at of this TemplatebackendQuestionnaireQuestion.
        :type created_at: datetime
        :param updated_at: The updated_at of this TemplatebackendQuestionnaireQuestion.
        :type updated_at: datetime
        """
        self.openapi_types = {
            'id': int,
            'tab': str,
            'question': str,
            'risk_weight': int,
            'answer_type': str,
            'flag': str,
            'tooltip': str,
            'tmp_uuid': str,
            'answers': List[TemplatebackendQuestionnaireQuestionAnswer],
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'tab': 'tab',
            'question': 'question',
            'risk_weight': 'riskWeight',
            'answer_type': 'answerType',
            'flag': 'flag',
            'tooltip': 'tooltip',
            'tmp_uuid': 'tmpUUID',
            'answers': 'answers',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._id = id
        self._tab = tab
        self._question = question
        self._risk_weight = risk_weight
        self._answer_type = answer_type
        self._flag = flag
        self._tooltip = tooltip
        self._tmp_uuid = tmp_uuid
        self._answers = answers
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'TemplatebackendQuestionnaireQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The templatebackendQuestionnaireQuestion of this TemplatebackendQuestionnaireQuestion.
        :rtype: TemplatebackendQuestionnaireQuestion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this TemplatebackendQuestionnaireQuestion.


        :return: The id of this TemplatebackendQuestionnaireQuestion.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this TemplatebackendQuestionnaireQuestion.


        :param id: The id of this TemplatebackendQuestionnaireQuestion.
        :type id: int
        """

        self._id = id

    @property
    def tab(self) -> str:
        """Gets the tab of this TemplatebackendQuestionnaireQuestion.


        :return: The tab of this TemplatebackendQuestionnaireQuestion.
        :rtype: str
        """
        return self._tab

    @tab.setter
    def tab(self, tab: str):
        """Sets the tab of this TemplatebackendQuestionnaireQuestion.


        :param tab: The tab of this TemplatebackendQuestionnaireQuestion.
        :type tab: str
        """

        self._tab = tab

    @property
    def question(self) -> str:
        """Gets the question of this TemplatebackendQuestionnaireQuestion.


        :return: The question of this TemplatebackendQuestionnaireQuestion.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question: str):
        """Sets the question of this TemplatebackendQuestionnaireQuestion.


        :param question: The question of this TemplatebackendQuestionnaireQuestion.
        :type question: str
        """

        self._question = question

    @property
    def risk_weight(self) -> int:
        """Gets the risk_weight of this TemplatebackendQuestionnaireQuestion.


        :return: The risk_weight of this TemplatebackendQuestionnaireQuestion.
        :rtype: int
        """
        return self._risk_weight

    @risk_weight.setter
    def risk_weight(self, risk_weight: int):
        """Sets the risk_weight of this TemplatebackendQuestionnaireQuestion.


        :param risk_weight: The risk_weight of this TemplatebackendQuestionnaireQuestion.
        :type risk_weight: int
        """

        self._risk_weight = risk_weight

    @property
    def answer_type(self) -> str:
        """Gets the answer_type of this TemplatebackendQuestionnaireQuestion.


        :return: The answer_type of this TemplatebackendQuestionnaireQuestion.
        :rtype: str
        """
        return self._answer_type

    @answer_type.setter
    def answer_type(self, answer_type: str):
        """Sets the answer_type of this TemplatebackendQuestionnaireQuestion.


        :param answer_type: The answer_type of this TemplatebackendQuestionnaireQuestion.
        :type answer_type: str
        """

        self._answer_type = answer_type

    @property
    def flag(self) -> str:
        """Gets the flag of this TemplatebackendQuestionnaireQuestion.


        :return: The flag of this TemplatebackendQuestionnaireQuestion.
        :rtype: str
        """
        return self._flag

    @flag.setter
    def flag(self, flag: str):
        """Sets the flag of this TemplatebackendQuestionnaireQuestion.


        :param flag: The flag of this TemplatebackendQuestionnaireQuestion.
        :type flag: str
        """

        self._flag = flag

    @property
    def tooltip(self) -> str:
        """Gets the tooltip of this TemplatebackendQuestionnaireQuestion.


        :return: The tooltip of this TemplatebackendQuestionnaireQuestion.
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip: str):
        """Sets the tooltip of this TemplatebackendQuestionnaireQuestion.


        :param tooltip: The tooltip of this TemplatebackendQuestionnaireQuestion.
        :type tooltip: str
        """

        self._tooltip = tooltip

    @property
    def tmp_uuid(self) -> str:
        """Gets the tmp_uuid of this TemplatebackendQuestionnaireQuestion.


        :return: The tmp_uuid of this TemplatebackendQuestionnaireQuestion.
        :rtype: str
        """
        return self._tmp_uuid

    @tmp_uuid.setter
    def tmp_uuid(self, tmp_uuid: str):
        """Sets the tmp_uuid of this TemplatebackendQuestionnaireQuestion.


        :param tmp_uuid: The tmp_uuid of this TemplatebackendQuestionnaireQuestion.
        :type tmp_uuid: str
        """

        self._tmp_uuid = tmp_uuid

    @property
    def answers(self) -> List[TemplatebackendQuestionnaireQuestionAnswer]:
        """Gets the answers of this TemplatebackendQuestionnaireQuestion.


        :return: The answers of this TemplatebackendQuestionnaireQuestion.
        :rtype: List[TemplatebackendQuestionnaireQuestionAnswer]
        """
        return self._answers

    @answers.setter
    def answers(self, answers: List[TemplatebackendQuestionnaireQuestionAnswer]):
        """Sets the answers of this TemplatebackendQuestionnaireQuestion.


        :param answers: The answers of this TemplatebackendQuestionnaireQuestion.
        :type answers: List[TemplatebackendQuestionnaireQuestionAnswer]
        """

        self._answers = answers

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this TemplatebackendQuestionnaireQuestion.


        :return: The created_at of this TemplatebackendQuestionnaireQuestion.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this TemplatebackendQuestionnaireQuestion.


        :param created_at: The created_at of this TemplatebackendQuestionnaireQuestion.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this TemplatebackendQuestionnaireQuestion.


        :return: The updated_at of this TemplatebackendQuestionnaireQuestion.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this TemplatebackendQuestionnaireQuestion.


        :param updated_at: The updated_at of this TemplatebackendQuestionnaireQuestion.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
