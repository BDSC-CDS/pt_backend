"""NOTE: Autogenerated. Do not edit the manually."""

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server_template.models.base_model import Model
from server_template import util


class TemplatebackendCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, username=None, password=None, totp=None):
        """TemplatebackendCredentials - a model defined in OpenAPI

        :param username: The username of this TemplatebackendCredentials.
        :type username: str
        :param password: The password of this TemplatebackendCredentials.
        :type password: str
        :param totp: The totp of this TemplatebackendCredentials.
        :type totp: str
        """
        self.openapi_types = {
            'username': str,
            'password': str,
            'totp': str
        }

        self.attribute_map = {
            'username': 'username',
            'password': 'password',
            'totp': 'totp'
        }

        self._username = username
        self._password = password
        self._totp = totp

    @classmethod
    def from_dict(cls, dikt) -> 'TemplatebackendCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The templatebackendCredentials of this TemplatebackendCredentials.
        :rtype: TemplatebackendCredentials
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this TemplatebackendCredentials.


        :return: The username of this TemplatebackendCredentials.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this TemplatebackendCredentials.


        :param username: The username of this TemplatebackendCredentials.
        :type username: str
        """

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this TemplatebackendCredentials.


        :return: The password of this TemplatebackendCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this TemplatebackendCredentials.


        :param password: The password of this TemplatebackendCredentials.
        :type password: str
        """

        self._password = password

    @property
    def totp(self) -> str:
        """Gets the totp of this TemplatebackendCredentials.


        :return: The totp of this TemplatebackendCredentials.
        :rtype: str
        """
        return self._totp

    @totp.setter
    def totp(self, totp: str):
        """Sets the totp of this TemplatebackendCredentials.


        :param totp: The totp of this TemplatebackendCredentials.
        :type totp: str
        """

        self._totp = totp
