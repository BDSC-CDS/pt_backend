"""NOTE: Autogenerated. Do not edit the manually."""

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server_template.models.base_model import Model
from server_template.models.protobuf_any import ProtobufAny
import re
from server_template import util

from server_template.models.protobuf_any import ProtobufAny
import re

class ApiHttpBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type=None, data=None, extensions=None):
        """ApiHttpBody - a model defined in OpenAPI

        :param content_type: The content_type of this ApiHttpBody.
        :type content_type: str
        :param data: The data of this ApiHttpBody.
        :type data: str
        :param extensions: The extensions of this ApiHttpBody.
        :type extensions: List[ProtobufAny]
        """
        self.openapi_types = {
            'content_type': str,
            'data': str,
            'extensions': List[ProtobufAny]
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'data': 'data',
            'extensions': 'extensions'
        }

        self._content_type = content_type
        self._data = data
        self._extensions = extensions

    @classmethod
    def from_dict(cls, dikt) -> 'ApiHttpBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiHttpBody of this ApiHttpBody.
        :rtype: ApiHttpBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self) -> str:
        """Gets the content_type of this ApiHttpBody.

        The HTTP Content-Type header value specifying the content type of the body.

        :return: The content_type of this ApiHttpBody.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type: str):
        """Sets the content_type of this ApiHttpBody.

        The HTTP Content-Type header value specifying the content type of the body.

        :param content_type: The content_type of this ApiHttpBody.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def data(self) -> str:
        """Gets the data of this ApiHttpBody.

        The HTTP request/response body as raw binary.

        :return: The data of this ApiHttpBody.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """Sets the data of this ApiHttpBody.

        The HTTP request/response body as raw binary.

        :param data: The data of this ApiHttpBody.
        :type data: str
        """
        if data is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', data):
            raise ValueError("Invalid value for `data`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._data = data

    @property
    def extensions(self) -> List[ProtobufAny]:
        """Gets the extensions of this ApiHttpBody.

        Application specific response metadata. Must be set in the first response for streaming APIs.

        :return: The extensions of this ApiHttpBody.
        :rtype: List[ProtobufAny]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions: List[ProtobufAny]):
        """Sets the extensions of this ApiHttpBody.

        Application specific response metadata. Must be set in the first response for streaming APIs.

        :param extensions: The extensions of this ApiHttpBody.
        :type extensions: List[ProtobufAny]
        """

        self._extensions = extensions
