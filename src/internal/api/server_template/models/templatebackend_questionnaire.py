"""NOTE: Autogenerated. Do not edit the manually."""

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server_template.models.base_model import Model
from server_template.models.templatebackend_questionnaire_version import TemplatebackendQuestionnaireVersion
from server_template import util

from server_template.models.templatebackend_questionnaire_version import TemplatebackendQuestionnaireVersion

class TemplatebackendQuestionnaire(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, reply_editable=None, last_version=None, versions=None, created_at=None, updated_at=None):
        """TemplatebackendQuestionnaire - a model defined in OpenAPI

        :param id: The id of this TemplatebackendQuestionnaire.
        :type id: int
        :param name: The name of this TemplatebackendQuestionnaire.
        :type name: str
        :param reply_editable: The reply_editable of this TemplatebackendQuestionnaire.
        :type reply_editable: bool
        :param last_version: The last_version of this TemplatebackendQuestionnaire.
        :type last_version: str
        :param versions: The versions of this TemplatebackendQuestionnaire.
        :type versions: List[TemplatebackendQuestionnaireVersion]
        :param created_at: The created_at of this TemplatebackendQuestionnaire.
        :type created_at: datetime
        :param updated_at: The updated_at of this TemplatebackendQuestionnaire.
        :type updated_at: datetime
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'reply_editable': bool,
            'last_version': str,
            'versions': List[TemplatebackendQuestionnaireVersion],
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'reply_editable': 'replyEditable',
            'last_version': 'lastVersion',
            'versions': 'versions',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._id = id
        self._name = name
        self._reply_editable = reply_editable
        self._last_version = last_version
        self._versions = versions
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'TemplatebackendQuestionnaire':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The templatebackendQuestionnaire of this TemplatebackendQuestionnaire.
        :rtype: TemplatebackendQuestionnaire
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this TemplatebackendQuestionnaire.


        :return: The id of this TemplatebackendQuestionnaire.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this TemplatebackendQuestionnaire.


        :param id: The id of this TemplatebackendQuestionnaire.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this TemplatebackendQuestionnaire.


        :return: The name of this TemplatebackendQuestionnaire.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TemplatebackendQuestionnaire.


        :param name: The name of this TemplatebackendQuestionnaire.
        :type name: str
        """

        self._name = name

    @property
    def reply_editable(self) -> bool:
        """Gets the reply_editable of this TemplatebackendQuestionnaire.


        :return: The reply_editable of this TemplatebackendQuestionnaire.
        :rtype: bool
        """
        return self._reply_editable

    @reply_editable.setter
    def reply_editable(self, reply_editable: bool):
        """Sets the reply_editable of this TemplatebackendQuestionnaire.


        :param reply_editable: The reply_editable of this TemplatebackendQuestionnaire.
        :type reply_editable: bool
        """

        self._reply_editable = reply_editable

    @property
    def last_version(self) -> str:
        """Gets the last_version of this TemplatebackendQuestionnaire.


        :return: The last_version of this TemplatebackendQuestionnaire.
        :rtype: str
        """
        return self._last_version

    @last_version.setter
    def last_version(self, last_version: str):
        """Sets the last_version of this TemplatebackendQuestionnaire.


        :param last_version: The last_version of this TemplatebackendQuestionnaire.
        :type last_version: str
        """

        self._last_version = last_version

    @property
    def versions(self) -> List[TemplatebackendQuestionnaireVersion]:
        """Gets the versions of this TemplatebackendQuestionnaire.


        :return: The versions of this TemplatebackendQuestionnaire.
        :rtype: List[TemplatebackendQuestionnaireVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions: List[TemplatebackendQuestionnaireVersion]):
        """Sets the versions of this TemplatebackendQuestionnaire.


        :param versions: The versions of this TemplatebackendQuestionnaire.
        :type versions: List[TemplatebackendQuestionnaireVersion]
        """

        self._versions = versions

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this TemplatebackendQuestionnaire.


        :return: The created_at of this TemplatebackendQuestionnaire.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this TemplatebackendQuestionnaire.


        :param created_at: The created_at of this TemplatebackendQuestionnaire.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this TemplatebackendQuestionnaire.


        :return: The updated_at of this TemplatebackendQuestionnaire.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this TemplatebackendQuestionnaire.


        :param updated_at: The updated_at of this TemplatebackendQuestionnaire.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
