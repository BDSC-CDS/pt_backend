"""NOTE: Autogenerated. Do not edit the manually."""

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server_template.models.base_model import Model
from server_template import util


class TemplatebackendSubstituteFieldRegexConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, field=None, regex=None, replacement=None):
        """TemplatebackendSubstituteFieldRegexConfig - a model defined in OpenAPI

        :param name: The name of this TemplatebackendSubstituteFieldRegexConfig.
        :type name: str
        :param field: The field of this TemplatebackendSubstituteFieldRegexConfig.
        :type field: str
        :param regex: The regex of this TemplatebackendSubstituteFieldRegexConfig.
        :type regex: str
        :param replacement: The replacement of this TemplatebackendSubstituteFieldRegexConfig.
        :type replacement: str
        """
        self.openapi_types = {
            'name': str,
            'field': str,
            'regex': str,
            'replacement': str
        }

        self.attribute_map = {
            'name': 'name',
            'field': 'field',
            'regex': 'regex',
            'replacement': 'replacement'
        }

        self._name = name
        self._field = field
        self._regex = regex
        self._replacement = replacement

    @classmethod
    def from_dict(cls, dikt) -> 'TemplatebackendSubstituteFieldRegexConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The templatebackendSubstituteFieldRegexConfig of this TemplatebackendSubstituteFieldRegexConfig.
        :rtype: TemplatebackendSubstituteFieldRegexConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this TemplatebackendSubstituteFieldRegexConfig.


        :return: The name of this TemplatebackendSubstituteFieldRegexConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TemplatebackendSubstituteFieldRegexConfig.


        :param name: The name of this TemplatebackendSubstituteFieldRegexConfig.
        :type name: str
        """

        self._name = name

    @property
    def field(self) -> str:
        """Gets the field of this TemplatebackendSubstituteFieldRegexConfig.


        :return: The field of this TemplatebackendSubstituteFieldRegexConfig.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field: str):
        """Sets the field of this TemplatebackendSubstituteFieldRegexConfig.


        :param field: The field of this TemplatebackendSubstituteFieldRegexConfig.
        :type field: str
        """

        self._field = field

    @property
    def regex(self) -> str:
        """Gets the regex of this TemplatebackendSubstituteFieldRegexConfig.


        :return: The regex of this TemplatebackendSubstituteFieldRegexConfig.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex: str):
        """Sets the regex of this TemplatebackendSubstituteFieldRegexConfig.


        :param regex: The regex of this TemplatebackendSubstituteFieldRegexConfig.
        :type regex: str
        """

        self._regex = regex

    @property
    def replacement(self) -> str:
        """Gets the replacement of this TemplatebackendSubstituteFieldRegexConfig.


        :return: The replacement of this TemplatebackendSubstituteFieldRegexConfig.
        :rtype: str
        """
        return self._replacement

    @replacement.setter
    def replacement(self, replacement: str):
        """Sets the replacement of this TemplatebackendSubstituteFieldRegexConfig.


        :param replacement: The replacement of this TemplatebackendSubstituteFieldRegexConfig.
        :type replacement: str
        """

        self._replacement = replacement
