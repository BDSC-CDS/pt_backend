"""NOTE: Autogenerated. Do not edit the manually."""

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server_template.models.base_model import Model
from server_template import util


class TemplatebackendTransformDatasetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_id=None, config_id=None):
        """TemplatebackendTransformDatasetRequest - a model defined in OpenAPI

        :param dataset_id: The dataset_id of this TemplatebackendTransformDatasetRequest.
        :type dataset_id: int
        :param config_id: The config_id of this TemplatebackendTransformDatasetRequest.
        :type config_id: int
        """
        self.openapi_types = {
            'dataset_id': int,
            'config_id': int
        }

        self.attribute_map = {
            'dataset_id': 'datasetId',
            'config_id': 'configId'
        }

        self._dataset_id = dataset_id
        self._config_id = config_id

    @classmethod
    def from_dict(cls, dikt) -> 'TemplatebackendTransformDatasetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The templatebackendTransformDatasetRequest of this TemplatebackendTransformDatasetRequest.
        :rtype: TemplatebackendTransformDatasetRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_id(self) -> int:
        """Gets the dataset_id of this TemplatebackendTransformDatasetRequest.


        :return: The dataset_id of this TemplatebackendTransformDatasetRequest.
        :rtype: int
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id: int):
        """Sets the dataset_id of this TemplatebackendTransformDatasetRequest.


        :param dataset_id: The dataset_id of this TemplatebackendTransformDatasetRequest.
        :type dataset_id: int
        """

        self._dataset_id = dataset_id

    @property
    def config_id(self) -> int:
        """Gets the config_id of this TemplatebackendTransformDatasetRequest.


        :return: The config_id of this TemplatebackendTransformDatasetRequest.
        :rtype: int
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id: int):
        """Sets the config_id of this TemplatebackendTransformDatasetRequest.


        :param config_id: The config_id of this TemplatebackendTransformDatasetRequest.
        :type config_id: int
        """

        self._config_id = config_id
