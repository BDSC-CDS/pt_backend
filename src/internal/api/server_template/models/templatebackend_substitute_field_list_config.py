"""NOTE: Autogenerated. Do not edit the manually."""

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server_template.models.base_model import Model
from server_template import util


class TemplatebackendSubstituteFieldListConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, field=None, substitution_list=None, replacement=None):
        """TemplatebackendSubstituteFieldListConfig - a model defined in OpenAPI

        :param name: The name of this TemplatebackendSubstituteFieldListConfig.
        :type name: str
        :param field: The field of this TemplatebackendSubstituteFieldListConfig.
        :type field: str
        :param substitution_list: The substitution_list of this TemplatebackendSubstituteFieldListConfig.
        :type substitution_list: List[str]
        :param replacement: The replacement of this TemplatebackendSubstituteFieldListConfig.
        :type replacement: str
        """
        self.openapi_types = {
            'name': str,
            'field': str,
            'substitution_list': List[str],
            'replacement': str
        }

        self.attribute_map = {
            'name': 'name',
            'field': 'field',
            'substitution_list': 'substitutionList',
            'replacement': 'replacement'
        }

        self._name = name
        self._field = field
        self._substitution_list = substitution_list
        self._replacement = replacement

    @classmethod
    def from_dict(cls, dikt) -> 'TemplatebackendSubstituteFieldListConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The templatebackendSubstituteFieldListConfig of this TemplatebackendSubstituteFieldListConfig.
        :rtype: TemplatebackendSubstituteFieldListConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this TemplatebackendSubstituteFieldListConfig.


        :return: The name of this TemplatebackendSubstituteFieldListConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TemplatebackendSubstituteFieldListConfig.


        :param name: The name of this TemplatebackendSubstituteFieldListConfig.
        :type name: str
        """

        self._name = name

    @property
    def field(self) -> str:
        """Gets the field of this TemplatebackendSubstituteFieldListConfig.


        :return: The field of this TemplatebackendSubstituteFieldListConfig.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field: str):
        """Sets the field of this TemplatebackendSubstituteFieldListConfig.


        :param field: The field of this TemplatebackendSubstituteFieldListConfig.
        :type field: str
        """

        self._field = field

    @property
    def substitution_list(self) -> List[str]:
        """Gets the substitution_list of this TemplatebackendSubstituteFieldListConfig.


        :return: The substitution_list of this TemplatebackendSubstituteFieldListConfig.
        :rtype: List[str]
        """
        return self._substitution_list

    @substitution_list.setter
    def substitution_list(self, substitution_list: List[str]):
        """Sets the substitution_list of this TemplatebackendSubstituteFieldListConfig.


        :param substitution_list: The substitution_list of this TemplatebackendSubstituteFieldListConfig.
        :type substitution_list: List[str]
        """

        self._substitution_list = substitution_list

    @property
    def replacement(self) -> str:
        """Gets the replacement of this TemplatebackendSubstituteFieldListConfig.


        :return: The replacement of this TemplatebackendSubstituteFieldListConfig.
        :rtype: str
        """
        return self._replacement

    @replacement.setter
    def replacement(self, replacement: str):
        """Sets the replacement of this TemplatebackendSubstituteFieldListConfig.


        :param replacement: The replacement of this TemplatebackendSubstituteFieldListConfig.
        :type replacement: str
        """

        self._replacement = replacement
