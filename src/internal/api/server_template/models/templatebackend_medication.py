"""NOTE: Autogenerated. Do not edit the manually."""

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server_template.models.base_model import Model
from server_template import util


class TemplatebackendMedication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, user_id=None, name=None, dosage=None, frequency=None, created_at=None, updated_at=None):
        """TemplatebackendMedication - a model defined in OpenAPI

        :param id: The id of this TemplatebackendMedication.
        :type id: int
        :param user_id: The user_id of this TemplatebackendMedication.
        :type user_id: int
        :param name: The name of this TemplatebackendMedication.
        :type name: str
        :param dosage: The dosage of this TemplatebackendMedication.
        :type dosage: str
        :param frequency: The frequency of this TemplatebackendMedication.
        :type frequency: str
        :param created_at: The created_at of this TemplatebackendMedication.
        :type created_at: datetime
        :param updated_at: The updated_at of this TemplatebackendMedication.
        :type updated_at: datetime
        """
        self.openapi_types = {
            'id': int,
            'user_id': int,
            'name': str,
            'dosage': str,
            'frequency': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'userId',
            'name': 'name',
            'dosage': 'dosage',
            'frequency': 'frequency',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._id = id
        self._user_id = user_id
        self._name = name
        self._dosage = dosage
        self._frequency = frequency
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'TemplatebackendMedication':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The templatebackendMedication of this TemplatebackendMedication.
        :rtype: TemplatebackendMedication
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this TemplatebackendMedication.


        :return: The id of this TemplatebackendMedication.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this TemplatebackendMedication.


        :param id: The id of this TemplatebackendMedication.
        :type id: int
        """

        self._id = id

    @property
    def user_id(self) -> int:
        """Gets the user_id of this TemplatebackendMedication.


        :return: The user_id of this TemplatebackendMedication.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this TemplatebackendMedication.


        :param user_id: The user_id of this TemplatebackendMedication.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def name(self) -> str:
        """Gets the name of this TemplatebackendMedication.


        :return: The name of this TemplatebackendMedication.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TemplatebackendMedication.


        :param name: The name of this TemplatebackendMedication.
        :type name: str
        """

        self._name = name

    @property
    def dosage(self) -> str:
        """Gets the dosage of this TemplatebackendMedication.


        :return: The dosage of this TemplatebackendMedication.
        :rtype: str
        """
        return self._dosage

    @dosage.setter
    def dosage(self, dosage: str):
        """Sets the dosage of this TemplatebackendMedication.


        :param dosage: The dosage of this TemplatebackendMedication.
        :type dosage: str
        """

        self._dosage = dosage

    @property
    def frequency(self) -> str:
        """Gets the frequency of this TemplatebackendMedication.


        :return: The frequency of this TemplatebackendMedication.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency: str):
        """Sets the frequency of this TemplatebackendMedication.


        :param frequency: The frequency of this TemplatebackendMedication.
        :type frequency: str
        """

        self._frequency = frequency

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this TemplatebackendMedication.


        :return: The created_at of this TemplatebackendMedication.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this TemplatebackendMedication.


        :param created_at: The created_at of this TemplatebackendMedication.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this TemplatebackendMedication.


        :return: The updated_at of this TemplatebackendMedication.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this TemplatebackendMedication.


        :param updated_at: The updated_at of this TemplatebackendMedication.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
