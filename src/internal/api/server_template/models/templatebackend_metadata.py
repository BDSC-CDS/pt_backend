"""NOTE: Autogenerated. Do not edit the manually."""

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server_template.models.base_model import Model
from server_template import util


class TemplatebackendMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, userid=None, tenantid=None, dataset_id=None, column_id=None, column_name=None, type=None, identifier=None):
        """TemplatebackendMetadata - a model defined in OpenAPI

        :param userid: The userid of this TemplatebackendMetadata.
        :type userid: int
        :param tenantid: The tenantid of this TemplatebackendMetadata.
        :type tenantid: int
        :param dataset_id: The dataset_id of this TemplatebackendMetadata.
        :type dataset_id: int
        :param column_id: The column_id of this TemplatebackendMetadata.
        :type column_id: int
        :param column_name: The column_name of this TemplatebackendMetadata.
        :type column_name: str
        :param type: The type of this TemplatebackendMetadata.
        :type type: str
        :param identifier: The identifier of this TemplatebackendMetadata.
        :type identifier: str
        """
        self.openapi_types = {
            'userid': int,
            'tenantid': int,
            'dataset_id': int,
            'column_id': int,
            'column_name': str,
            'type': str,
            'identifier': str
        }

        self.attribute_map = {
            'userid': 'userid',
            'tenantid': 'tenantid',
            'dataset_id': 'datasetId',
            'column_id': 'columnId',
            'column_name': 'columnName',
            'type': 'type',
            'identifier': 'identifier'
        }

        self._userid = userid
        self._tenantid = tenantid
        self._dataset_id = dataset_id
        self._column_id = column_id
        self._column_name = column_name
        self._type = type
        self._identifier = identifier

    @classmethod
    def from_dict(cls, dikt) -> 'TemplatebackendMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The templatebackendMetadata of this TemplatebackendMetadata.
        :rtype: TemplatebackendMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def userid(self) -> int:
        """Gets the userid of this TemplatebackendMetadata.


        :return: The userid of this TemplatebackendMetadata.
        :rtype: int
        """
        return self._userid

    @userid.setter
    def userid(self, userid: int):
        """Sets the userid of this TemplatebackendMetadata.


        :param userid: The userid of this TemplatebackendMetadata.
        :type userid: int
        """

        self._userid = userid

    @property
    def tenantid(self) -> int:
        """Gets the tenantid of this TemplatebackendMetadata.


        :return: The tenantid of this TemplatebackendMetadata.
        :rtype: int
        """
        return self._tenantid

    @tenantid.setter
    def tenantid(self, tenantid: int):
        """Sets the tenantid of this TemplatebackendMetadata.


        :param tenantid: The tenantid of this TemplatebackendMetadata.
        :type tenantid: int
        """

        self._tenantid = tenantid

    @property
    def dataset_id(self) -> int:
        """Gets the dataset_id of this TemplatebackendMetadata.


        :return: The dataset_id of this TemplatebackendMetadata.
        :rtype: int
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id: int):
        """Sets the dataset_id of this TemplatebackendMetadata.


        :param dataset_id: The dataset_id of this TemplatebackendMetadata.
        :type dataset_id: int
        """

        self._dataset_id = dataset_id

    @property
    def column_id(self) -> int:
        """Gets the column_id of this TemplatebackendMetadata.


        :return: The column_id of this TemplatebackendMetadata.
        :rtype: int
        """
        return self._column_id

    @column_id.setter
    def column_id(self, column_id: int):
        """Sets the column_id of this TemplatebackendMetadata.


        :param column_id: The column_id of this TemplatebackendMetadata.
        :type column_id: int
        """

        self._column_id = column_id

    @property
    def column_name(self) -> str:
        """Gets the column_name of this TemplatebackendMetadata.


        :return: The column_name of this TemplatebackendMetadata.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name: str):
        """Sets the column_name of this TemplatebackendMetadata.


        :param column_name: The column_name of this TemplatebackendMetadata.
        :type column_name: str
        """

        self._column_name = column_name

    @property
    def type(self) -> str:
        """Gets the type of this TemplatebackendMetadata.


        :return: The type of this TemplatebackendMetadata.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this TemplatebackendMetadata.


        :param type: The type of this TemplatebackendMetadata.
        :type type: str
        """

        self._type = type

    @property
    def identifier(self) -> str:
        """Gets the identifier of this TemplatebackendMetadata.


        :return: The identifier of this TemplatebackendMetadata.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier: str):
        """Sets the identifier of this TemplatebackendMetadata.


        :param identifier: The identifier of this TemplatebackendMetadata.
        :type identifier: str
        """

        self._identifier = identifier
