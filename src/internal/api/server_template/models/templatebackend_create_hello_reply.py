from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server_template.models.base_model import Model
from server_template import util


class TemplatebackendCreateHelloReply(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier=None, title=None, content=None):  # noqa: E501
        """TemplatebackendCreateHelloReply - a model defined in OpenAPI

        :param identifier: The identifier of this TemplatebackendCreateHelloReply.  # noqa: E501
        :type identifier: int
        :param title: The title of this TemplatebackendCreateHelloReply.  # noqa: E501
        :type title: str
        :param content: The content of this TemplatebackendCreateHelloReply.  # noqa: E501
        :type content: str
        """
        self.openapi_types = {
            'identifier': int,
            'title': str,
            'content': str
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'title': 'title',
            'content': 'content'
        }

        self._identifier = identifier
        self._title = title
        self._content = content

    @classmethod
    def from_dict(cls, dikt) -> 'TemplatebackendCreateHelloReply':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The templatebackendCreateHelloReply of this TemplatebackendCreateHelloReply.  # noqa: E501
        :rtype: TemplatebackendCreateHelloReply
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self) -> int:
        """Gets the identifier of this TemplatebackendCreateHelloReply.


        :return: The identifier of this TemplatebackendCreateHelloReply.
        :rtype: int
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier: int):
        """Sets the identifier of this TemplatebackendCreateHelloReply.


        :param identifier: The identifier of this TemplatebackendCreateHelloReply.
        :type identifier: int
        """

        self._identifier = identifier

    @property
    def title(self) -> str:
        """Gets the title of this TemplatebackendCreateHelloReply.


        :return: The title of this TemplatebackendCreateHelloReply.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this TemplatebackendCreateHelloReply.


        :param title: The title of this TemplatebackendCreateHelloReply.
        :type title: str
        """

        self._title = title

    @property
    def content(self) -> str:
        """Gets the content of this TemplatebackendCreateHelloReply.


        :return: The content of this TemplatebackendCreateHelloReply.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this TemplatebackendCreateHelloReply.


        :param content: The content of this TemplatebackendCreateHelloReply.
        :type content: str
        """

        self._content = content
