"""NOTE: Autogenerated. Do not edit the manually."""

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server_template.models.base_model import Model
from server_template import util


class TemplatebackendStoreDatasetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_name=None, dataset=None, types=None, identifiers=None, is_id=None):
        """TemplatebackendStoreDatasetRequest - a model defined in OpenAPI

        :param dataset_name: The dataset_name of this TemplatebackendStoreDatasetRequest.
        :type dataset_name: str
        :param dataset: The dataset of this TemplatebackendStoreDatasetRequest.
        :type dataset: str
        :param types: The types of this TemplatebackendStoreDatasetRequest.
        :type types: str
        :param identifiers: The identifiers of this TemplatebackendStoreDatasetRequest.
        :type identifiers: str
        :param is_id: The is_id of this TemplatebackendStoreDatasetRequest.
        :type is_id: str
        """
        self.openapi_types = {
            'dataset_name': str,
            'dataset': str,
            'types': str,
            'identifiers': str,
            'is_id': str
        }

        self.attribute_map = {
            'dataset_name': 'datasetName',
            'dataset': 'dataset',
            'types': 'types',
            'identifiers': 'identifiers',
            'is_id': 'isId'
        }

        self._dataset_name = dataset_name
        self._dataset = dataset
        self._types = types
        self._identifiers = identifiers
        self._is_id = is_id

    @classmethod
    def from_dict(cls, dikt) -> 'TemplatebackendStoreDatasetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The templatebackendStoreDatasetRequest of this TemplatebackendStoreDatasetRequest.
        :rtype: TemplatebackendStoreDatasetRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_name(self) -> str:
        """Gets the dataset_name of this TemplatebackendStoreDatasetRequest.


        :return: The dataset_name of this TemplatebackendStoreDatasetRequest.
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name: str):
        """Sets the dataset_name of this TemplatebackendStoreDatasetRequest.


        :param dataset_name: The dataset_name of this TemplatebackendStoreDatasetRequest.
        :type dataset_name: str
        """

        self._dataset_name = dataset_name

    @property
    def dataset(self) -> str:
        """Gets the dataset of this TemplatebackendStoreDatasetRequest.


        :return: The dataset of this TemplatebackendStoreDatasetRequest.
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset: str):
        """Sets the dataset of this TemplatebackendStoreDatasetRequest.


        :param dataset: The dataset of this TemplatebackendStoreDatasetRequest.
        :type dataset: str
        """

        self._dataset = dataset

    @property
    def types(self) -> str:
        """Gets the types of this TemplatebackendStoreDatasetRequest.


        :return: The types of this TemplatebackendStoreDatasetRequest.
        :rtype: str
        """
        return self._types

    @types.setter
    def types(self, types: str):
        """Sets the types of this TemplatebackendStoreDatasetRequest.


        :param types: The types of this TemplatebackendStoreDatasetRequest.
        :type types: str
        """

        self._types = types

    @property
    def identifiers(self) -> str:
        """Gets the identifiers of this TemplatebackendStoreDatasetRequest.


        :return: The identifiers of this TemplatebackendStoreDatasetRequest.
        :rtype: str
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers: str):
        """Sets the identifiers of this TemplatebackendStoreDatasetRequest.


        :param identifiers: The identifiers of this TemplatebackendStoreDatasetRequest.
        :type identifiers: str
        """

        self._identifiers = identifiers

    @property
    def is_id(self) -> str:
        """Gets the is_id of this TemplatebackendStoreDatasetRequest.


        :return: The is_id of this TemplatebackendStoreDatasetRequest.
        :rtype: str
        """
        return self._is_id

    @is_id.setter
    def is_id(self, is_id: str):
        """Sets the is_id of this TemplatebackendStoreDatasetRequest.


        :param is_id: The is_id of this TemplatebackendStoreDatasetRequest.
        :type is_id: str
        """

        self._is_id = is_id
