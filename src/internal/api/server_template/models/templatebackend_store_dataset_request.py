"""NOTE: Autogenerated. Do not edit the manually."""

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server_template.models.base_model import Model
from server_template import util


class TemplatebackendStoreDatasetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, userid=None, tenantid=None, dataset_name=None, path=None):
        """TemplatebackendStoreDatasetRequest - a model defined in OpenAPI

        :param userid: The userid of this TemplatebackendStoreDatasetRequest.
        :type userid: int
        :param tenantid: The tenantid of this TemplatebackendStoreDatasetRequest.
        :type tenantid: int
        :param dataset_name: The dataset_name of this TemplatebackendStoreDatasetRequest.
        :type dataset_name: str
        :param path: The path of this TemplatebackendStoreDatasetRequest.
        :type path: str
        """
        self.openapi_types = {
            'userid': int,
            'tenantid': int,
            'dataset_name': str,
            'path': str
        }

        self.attribute_map = {
            'userid': 'userid',
            'tenantid': 'tenantid',
            'dataset_name': 'datasetName',
            'path': 'path'
        }

        self._userid = userid
        self._tenantid = tenantid
        self._dataset_name = dataset_name
        self._path = path

    @classmethod
    def from_dict(cls, dikt) -> 'TemplatebackendStoreDatasetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The templatebackendStoreDatasetRequest of this TemplatebackendStoreDatasetRequest.
        :rtype: TemplatebackendStoreDatasetRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def userid(self) -> int:
        """Gets the userid of this TemplatebackendStoreDatasetRequest.


        :return: The userid of this TemplatebackendStoreDatasetRequest.
        :rtype: int
        """
        return self._userid

    @userid.setter
    def userid(self, userid: int):
        """Sets the userid of this TemplatebackendStoreDatasetRequest.


        :param userid: The userid of this TemplatebackendStoreDatasetRequest.
        :type userid: int
        """

        self._userid = userid

    @property
    def tenantid(self) -> int:
        """Gets the tenantid of this TemplatebackendStoreDatasetRequest.


        :return: The tenantid of this TemplatebackendStoreDatasetRequest.
        :rtype: int
        """
        return self._tenantid

    @tenantid.setter
    def tenantid(self, tenantid: int):
        """Sets the tenantid of this TemplatebackendStoreDatasetRequest.


        :param tenantid: The tenantid of this TemplatebackendStoreDatasetRequest.
        :type tenantid: int
        """

        self._tenantid = tenantid

    @property
    def dataset_name(self) -> str:
        """Gets the dataset_name of this TemplatebackendStoreDatasetRequest.


        :return: The dataset_name of this TemplatebackendStoreDatasetRequest.
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name: str):
        """Sets the dataset_name of this TemplatebackendStoreDatasetRequest.


        :param dataset_name: The dataset_name of this TemplatebackendStoreDatasetRequest.
        :type dataset_name: str
        """

        self._dataset_name = dataset_name

    @property
    def path(self) -> str:
        """Gets the path of this TemplatebackendStoreDatasetRequest.


        :return: The path of this TemplatebackendStoreDatasetRequest.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this TemplatebackendStoreDatasetRequest.


        :param path: The path of this TemplatebackendStoreDatasetRequest.
        :type path: str
        """

        self._path = path
