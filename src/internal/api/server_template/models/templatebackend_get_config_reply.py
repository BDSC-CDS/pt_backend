"""NOTE: Autogenerated. Do not edit the manually."""

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server_template.models.base_model import Model
from server_template.models.templatebackend_get_config_result import TemplatebackendGetConfigResult
from server_template import util

from server_template.models.templatebackend_get_config_result import TemplatebackendGetConfigResult

class TemplatebackendGetConfigReply(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, result=None):
        """TemplatebackendGetConfigReply - a model defined in OpenAPI

        :param result: The result of this TemplatebackendGetConfigReply.
        :type result: TemplatebackendGetConfigResult
        """
        self.openapi_types = {
            'result': TemplatebackendGetConfigResult
        }

        self.attribute_map = {
            'result': 'result'
        }

        self._result = result

    @classmethod
    def from_dict(cls, dikt) -> 'TemplatebackendGetConfigReply':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The templatebackendGetConfigReply of this TemplatebackendGetConfigReply.
        :rtype: TemplatebackendGetConfigReply
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result(self) -> TemplatebackendGetConfigResult:
        """Gets the result of this TemplatebackendGetConfigReply.


        :return: The result of this TemplatebackendGetConfigReply.
        :rtype: TemplatebackendGetConfigResult
        """
        return self._result

    @result.setter
    def result(self, result: TemplatebackendGetConfigResult):
        """Sets the result of this TemplatebackendGetConfigReply.


        :param result: The result of this TemplatebackendGetConfigReply.
        :type result: TemplatebackendGetConfigResult
        """

        self._result = result
