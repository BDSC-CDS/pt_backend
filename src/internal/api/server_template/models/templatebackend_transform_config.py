"""NOTE: Autogenerated. Do not edit the manually."""

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server_template.models.base_model import Model
from server_template.models.templatebackend_date_shift_config import TemplatebackendDateShiftConfig
from server_template.models.templatebackend_scramble_field_config import TemplatebackendScrambleFieldConfig
from server_template.models.templatebackend_substitute_field_list_config import TemplatebackendSubstituteFieldListConfig
from server_template.models.templatebackend_substitute_field_regex_config import TemplatebackendSubstituteFieldRegexConfig
from server_template import util

from server_template.models.templatebackend_date_shift_config import TemplatebackendDateShiftConfig
from server_template.models.templatebackend_scramble_field_config import TemplatebackendScrambleFieldConfig
from server_template.models.templatebackend_substitute_field_list_config import TemplatebackendSubstituteFieldListConfig
from server_template.models.templatebackend_substitute_field_regex_config import TemplatebackendSubstituteFieldRegexConfig

class TemplatebackendTransformConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, userid=None, tenantid=None, questionnaireid=None, date_shift=None, scramble_field=None, sub_field_list_list=None, sub_field_regex_list=None, created_at=None, deleted_at=None):
        """TemplatebackendTransformConfig - a model defined in OpenAPI

        :param id: The id of this TemplatebackendTransformConfig.
        :type id: int
        :param name: The name of this TemplatebackendTransformConfig.
        :type name: str
        :param userid: The userid of this TemplatebackendTransformConfig.
        :type userid: int
        :param tenantid: The tenantid of this TemplatebackendTransformConfig.
        :type tenantid: int
        :param questionnaireid: The questionnaireid of this TemplatebackendTransformConfig.
        :type questionnaireid: int
        :param date_shift: The date_shift of this TemplatebackendTransformConfig.
        :type date_shift: TemplatebackendDateShiftConfig
        :param scramble_field: The scramble_field of this TemplatebackendTransformConfig.
        :type scramble_field: TemplatebackendScrambleFieldConfig
        :param sub_field_list_list: The sub_field_list_list of this TemplatebackendTransformConfig.
        :type sub_field_list_list: List[TemplatebackendSubstituteFieldListConfig]
        :param sub_field_regex_list: The sub_field_regex_list of this TemplatebackendTransformConfig.
        :type sub_field_regex_list: List[TemplatebackendSubstituteFieldRegexConfig]
        :param created_at: The created_at of this TemplatebackendTransformConfig.
        :type created_at: datetime
        :param deleted_at: The deleted_at of this TemplatebackendTransformConfig.
        :type deleted_at: datetime
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'userid': int,
            'tenantid': int,
            'questionnaireid': int,
            'date_shift': TemplatebackendDateShiftConfig,
            'scramble_field': TemplatebackendScrambleFieldConfig,
            'sub_field_list_list': List[TemplatebackendSubstituteFieldListConfig],
            'sub_field_regex_list': List[TemplatebackendSubstituteFieldRegexConfig],
            'created_at': datetime,
            'deleted_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'userid': 'userid',
            'tenantid': 'tenantid',
            'questionnaireid': 'questionnaireid',
            'date_shift': 'dateShift',
            'scramble_field': 'scrambleField',
            'sub_field_list_list': 'subFieldListList',
            'sub_field_regex_list': 'subFieldRegexList',
            'created_at': 'createdAt',
            'deleted_at': 'deletedAt'
        }

        self._id = id
        self._name = name
        self._userid = userid
        self._tenantid = tenantid
        self._questionnaireid = questionnaireid
        self._date_shift = date_shift
        self._scramble_field = scramble_field
        self._sub_field_list_list = sub_field_list_list
        self._sub_field_regex_list = sub_field_regex_list
        self._created_at = created_at
        self._deleted_at = deleted_at

    @classmethod
    def from_dict(cls, dikt) -> 'TemplatebackendTransformConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The templatebackendTransformConfig of this TemplatebackendTransformConfig.
        :rtype: TemplatebackendTransformConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this TemplatebackendTransformConfig.


        :return: The id of this TemplatebackendTransformConfig.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this TemplatebackendTransformConfig.


        :param id: The id of this TemplatebackendTransformConfig.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this TemplatebackendTransformConfig.


        :return: The name of this TemplatebackendTransformConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TemplatebackendTransformConfig.


        :param name: The name of this TemplatebackendTransformConfig.
        :type name: str
        """

        self._name = name

    @property
    def userid(self) -> int:
        """Gets the userid of this TemplatebackendTransformConfig.


        :return: The userid of this TemplatebackendTransformConfig.
        :rtype: int
        """
        return self._userid

    @userid.setter
    def userid(self, userid: int):
        """Sets the userid of this TemplatebackendTransformConfig.


        :param userid: The userid of this TemplatebackendTransformConfig.
        :type userid: int
        """

        self._userid = userid

    @property
    def tenantid(self) -> int:
        """Gets the tenantid of this TemplatebackendTransformConfig.


        :return: The tenantid of this TemplatebackendTransformConfig.
        :rtype: int
        """
        return self._tenantid

    @tenantid.setter
    def tenantid(self, tenantid: int):
        """Sets the tenantid of this TemplatebackendTransformConfig.


        :param tenantid: The tenantid of this TemplatebackendTransformConfig.
        :type tenantid: int
        """

        self._tenantid = tenantid

    @property
    def questionnaireid(self) -> int:
        """Gets the questionnaireid of this TemplatebackendTransformConfig.


        :return: The questionnaireid of this TemplatebackendTransformConfig.
        :rtype: int
        """
        return self._questionnaireid

    @questionnaireid.setter
    def questionnaireid(self, questionnaireid: int):
        """Sets the questionnaireid of this TemplatebackendTransformConfig.


        :param questionnaireid: The questionnaireid of this TemplatebackendTransformConfig.
        :type questionnaireid: int
        """

        self._questionnaireid = questionnaireid

    @property
    def date_shift(self) -> TemplatebackendDateShiftConfig:
        """Gets the date_shift of this TemplatebackendTransformConfig.


        :return: The date_shift of this TemplatebackendTransformConfig.
        :rtype: TemplatebackendDateShiftConfig
        """
        return self._date_shift

    @date_shift.setter
    def date_shift(self, date_shift: TemplatebackendDateShiftConfig):
        """Sets the date_shift of this TemplatebackendTransformConfig.


        :param date_shift: The date_shift of this TemplatebackendTransformConfig.
        :type date_shift: TemplatebackendDateShiftConfig
        """

        self._date_shift = date_shift

    @property
    def scramble_field(self) -> TemplatebackendScrambleFieldConfig:
        """Gets the scramble_field of this TemplatebackendTransformConfig.


        :return: The scramble_field of this TemplatebackendTransformConfig.
        :rtype: TemplatebackendScrambleFieldConfig
        """
        return self._scramble_field

    @scramble_field.setter
    def scramble_field(self, scramble_field: TemplatebackendScrambleFieldConfig):
        """Sets the scramble_field of this TemplatebackendTransformConfig.


        :param scramble_field: The scramble_field of this TemplatebackendTransformConfig.
        :type scramble_field: TemplatebackendScrambleFieldConfig
        """

        self._scramble_field = scramble_field

    @property
    def sub_field_list_list(self) -> List[TemplatebackendSubstituteFieldListConfig]:
        """Gets the sub_field_list_list of this TemplatebackendTransformConfig.


        :return: The sub_field_list_list of this TemplatebackendTransformConfig.
        :rtype: List[TemplatebackendSubstituteFieldListConfig]
        """
        return self._sub_field_list_list

    @sub_field_list_list.setter
    def sub_field_list_list(self, sub_field_list_list: List[TemplatebackendSubstituteFieldListConfig]):
        """Sets the sub_field_list_list of this TemplatebackendTransformConfig.


        :param sub_field_list_list: The sub_field_list_list of this TemplatebackendTransformConfig.
        :type sub_field_list_list: List[TemplatebackendSubstituteFieldListConfig]
        """

        self._sub_field_list_list = sub_field_list_list

    @property
    def sub_field_regex_list(self) -> List[TemplatebackendSubstituteFieldRegexConfig]:
        """Gets the sub_field_regex_list of this TemplatebackendTransformConfig.


        :return: The sub_field_regex_list of this TemplatebackendTransformConfig.
        :rtype: List[TemplatebackendSubstituteFieldRegexConfig]
        """
        return self._sub_field_regex_list

    @sub_field_regex_list.setter
    def sub_field_regex_list(self, sub_field_regex_list: List[TemplatebackendSubstituteFieldRegexConfig]):
        """Sets the sub_field_regex_list of this TemplatebackendTransformConfig.


        :param sub_field_regex_list: The sub_field_regex_list of this TemplatebackendTransformConfig.
        :type sub_field_regex_list: List[TemplatebackendSubstituteFieldRegexConfig]
        """

        self._sub_field_regex_list = sub_field_regex_list

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this TemplatebackendTransformConfig.


        :return: The created_at of this TemplatebackendTransformConfig.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this TemplatebackendTransformConfig.


        :param created_at: The created_at of this TemplatebackendTransformConfig.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def deleted_at(self) -> datetime:
        """Gets the deleted_at of this TemplatebackendTransformConfig.


        :return: The deleted_at of this TemplatebackendTransformConfig.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: datetime):
        """Sets the deleted_at of this TemplatebackendTransformConfig.


        :param deleted_at: The deleted_at of this TemplatebackendTransformConfig.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at
