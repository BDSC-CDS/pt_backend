# coding: utf-8

"""
    pt backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: development.bdsc@chuv.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.templatebackend_get_config_reply import TemplatebackendGetConfigReply

class TestTemplatebackendGetConfigReply(unittest.TestCase):
    """TemplatebackendGetConfigReply unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TemplatebackendGetConfigReply:
        """Test TemplatebackendGetConfigReply
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TemplatebackendGetConfigReply`
        """
        model = TemplatebackendGetConfigReply()
        if include_optional:
            return TemplatebackendGetConfigReply(
                result = openapi_client.models.templatebackend_get_config_result.templatebackendGetConfigResult(
                    config = openapi_client.models.templatebackend_config.templatebackendConfig(
                        id = 56, 
                        questionnaireid = 56, 
                        has_scramble_field = True, 
                        has_date_shift = True, 
                        hassub_field_list = True, 
                        hassub_field_regex = True, 
                        scramble_field_fields = [
                            ''
                            ], 
                        date_shift_lowrange = 56, 
                        date_shift_highrange = 56, 
                        sub_field_list_fields = [
                            ''
                            ], 
                        sub_field_list_substitute = [
                            ''
                            ], 
                        sub_field_list_replacement = '', 
                        sub_field_regex_fields = [
                            ''
                            ], 
                        sub_field_regex_regex = '', 
                        sub_field_regex_replacement = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
            )
        else:
            return TemplatebackendGetConfigReply(
        )
        """

    def testTemplatebackendGetConfigReply(self):
        """Test TemplatebackendGetConfigReply"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
