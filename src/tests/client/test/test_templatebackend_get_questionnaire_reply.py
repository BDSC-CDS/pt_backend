# coding: utf-8

"""
    pt backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: development.bdsc@chuv.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.templatebackend_get_questionnaire_reply import TemplatebackendGetQuestionnaireReply

class TestTemplatebackendGetQuestionnaireReply(unittest.TestCase):
    """TemplatebackendGetQuestionnaireReply unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TemplatebackendGetQuestionnaireReply:
        """Test TemplatebackendGetQuestionnaireReply
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TemplatebackendGetQuestionnaireReply`
        """
        model = TemplatebackendGetQuestionnaireReply()
        if include_optional:
            return TemplatebackendGetQuestionnaireReply(
                result = openapi_client.models.templatebackend_get_questionnaire_result.templatebackendGetQuestionnaireResult(
                    questionnaire = openapi_client.models.templatebackend_questionnaire.templatebackendQuestionnaire(
                        id = 56, 
                        name = '', 
                        reply_editable = True, 
                        last_version = '', 
                        versions = [
                            openapi_client.models.templatebackend_questionnaire_version.templatebackendQuestionnaireVersion(
                                id = 56, 
                                version = '', 
                                questions = [
                                    openapi_client.models.templatebackend_questionnaire_question.templatebackendQuestionnaireQuestion(
                                        id = 56, 
                                        tab = '', 
                                        question = '', 
                                        risk_weight = 56, 
                                        answer_type = '', 
                                        flag = '', 
                                        tooltip = '', 
                                        answers = [
                                            openapi_client.models.templatebackend_questionnaire_question_answer.templatebackendQuestionnaireQuestionAnswer(
                                                id = 56, 
                                                text = '', 
                                                risk_level = 56, 
                                                rule_prefills = [
                                                    openapi_client.models.templatebackend_questionnaire_question_answer_rule_prefill.templatebackendQuestionnaireQuestionAnswerRulePrefill(
                                                        id = 56, 
                                                        question_id = 56, 
                                                        answer_id = 56, 
                                                        answer_text = '', 
                                                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                                    ], 
                                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                            ], 
                                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                    ], 
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
            )
        else:
            return TemplatebackendGetQuestionnaireReply(
        )
        """

    def testTemplatebackendGetQuestionnaireReply(self):
        """Test TemplatebackendGetQuestionnaireReply"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
