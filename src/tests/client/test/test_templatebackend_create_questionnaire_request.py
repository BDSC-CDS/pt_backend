# coding: utf-8

"""
    pt backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: development.bdsc@chuv.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.templatebackend_create_questionnaire_request import TemplatebackendCreateQuestionnaireRequest

class TestTemplatebackendCreateQuestionnaireRequest(unittest.TestCase):
    """TemplatebackendCreateQuestionnaireRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TemplatebackendCreateQuestionnaireRequest:
        """Test TemplatebackendCreateQuestionnaireRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TemplatebackendCreateQuestionnaireRequest`
        """
        model = TemplatebackendCreateQuestionnaireRequest()
        if include_optional:
            return TemplatebackendCreateQuestionnaireRequest(
                questionnaire = openapi_client.models.templatebackend_questionnaire.templatebackendQuestionnaire(
                    id = 56, 
                    name = '', 
                    reply_editable = True, 
                    last_version = '', 
                    versions = [
                        openapi_client.models.templatebackend_questionnaire_version.templatebackendQuestionnaireVersion(
                            id = 56, 
                            version = '', 
                            questions = [
                                openapi_client.models.templatebackend_questionnaire_question.templatebackendQuestionnaireQuestion(
                                    id = 56, 
                                    tab = '', 
                                    question = '', 
                                    risk_weight = 56, 
                                    answer_type = '', 
                                    flag = '', 
                                    tooltip = '', 
                                    tmp_uuid = '', 
                                    answers = [
                                        openapi_client.models.templatebackend_questionnaire_question_answer.templatebackendQuestionnaireQuestionAnswer(
                                            id = 56, 
                                            text = '', 
                                            risk_level = 56, 
                                            high_risk = True, 
                                            tmp_uuid = '', 
                                            json_configuration = '', 
                                            rule_prefills = [
                                                openapi_client.models.templatebackend_questionnaire_question_answer_rule_prefill.templatebackendQuestionnaireQuestionAnswerRulePrefill(
                                                    id = 56, 
                                                    question_id = 56, 
                                                    answer_id = 56, 
                                                    answer_text = '', 
                                                    tmp_question_uuid = '', 
                                                    tmp_answer_uuid = '', 
                                                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                                ], 
                                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                        ], 
                                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            published = True, 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return TemplatebackendCreateQuestionnaireRequest(
        )
        """

    def testTemplatebackendCreateQuestionnaireRequest(self):
        """Test TemplatebackendCreateQuestionnaireRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
