# coding: utf-8

"""
    pt backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: development.bdsc@chuv.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.templatebackend_date_shift_config import TemplatebackendDateShiftConfig
from openapi_client.models.templatebackend_scramble_field_config import TemplatebackendScrambleFieldConfig
from openapi_client.models.templatebackend_substitute_field_list_config import TemplatebackendSubstituteFieldListConfig
from openapi_client.models.templatebackend_substitute_field_regex_config import TemplatebackendSubstituteFieldRegexConfig
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TemplatebackendTransformConfig(BaseModel):
    """
    TemplatebackendTransformConfig
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    userid: Optional[StrictInt] = None
    tenantid: Optional[StrictInt] = None
    questionnaireid: Optional[StrictInt] = None
    date_shift: Optional[TemplatebackendDateShiftConfig] = Field(default=None, alias="dateShift")
    scramble_field: Optional[TemplatebackendScrambleFieldConfig] = Field(default=None, alias="scrambleField")
    sub_field_list_list: Optional[List[TemplatebackendSubstituteFieldListConfig]] = Field(default=None, alias="subFieldListList")
    sub_field_regex_list: Optional[List[TemplatebackendSubstituteFieldRegexConfig]] = Field(default=None, alias="subFieldRegexList")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    deleted_at: Optional[datetime] = Field(default=None, alias="deletedAt")
    __properties: ClassVar[List[str]] = ["id", "name", "userid", "tenantid", "questionnaireid", "dateShift", "scrambleField", "subFieldListList", "subFieldRegexList", "createdAt", "deletedAt"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TemplatebackendTransformConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_shift
        if self.date_shift:
            _dict['dateShift'] = self.date_shift.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scramble_field
        if self.scramble_field:
            _dict['scrambleField'] = self.scramble_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sub_field_list_list (list)
        _items = []
        if self.sub_field_list_list:
            for _item in self.sub_field_list_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subFieldListList'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sub_field_regex_list (list)
        _items = []
        if self.sub_field_regex_list:
            for _item in self.sub_field_regex_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subFieldRegexList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TemplatebackendTransformConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "userid": obj.get("userid"),
            "tenantid": obj.get("tenantid"),
            "questionnaireid": obj.get("questionnaireid"),
            "dateShift": TemplatebackendDateShiftConfig.from_dict(obj.get("dateShift")) if obj.get("dateShift") is not None else None,
            "scrambleField": TemplatebackendScrambleFieldConfig.from_dict(obj.get("scrambleField")) if obj.get("scrambleField") is not None else None,
            "subFieldListList": [TemplatebackendSubstituteFieldListConfig.from_dict(_item) for _item in obj.get("subFieldListList")] if obj.get("subFieldListList") is not None else None,
            "subFieldRegexList": [TemplatebackendSubstituteFieldRegexConfig.from_dict(_item) for _item in obj.get("subFieldRegexList")] if obj.get("subFieldRegexList") is not None else None,
            "createdAt": obj.get("createdAt"),
            "deletedAt": obj.get("deletedAt")
        })
        return _obj


