# coding: utf-8

"""
    pt backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: development.bdsc@chuv.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TemplatebackendConfig(BaseModel):
    """
    TemplatebackendConfig
    """ # noqa: E501
    id: Optional[StrictInt] = None
    userid: Optional[StrictInt] = None
    tenantid: Optional[StrictInt] = None
    questionnaireid: Optional[StrictInt] = None
    has_scramble_field: Optional[StrictBool] = Field(default=None, alias="hasScrambleField")
    has_date_shift: Optional[StrictBool] = Field(default=None, alias="hasDateShift")
    hassub_field_list: Optional[StrictBool] = Field(default=None, alias="hassubFieldList")
    hassub_field_regex: Optional[StrictBool] = Field(default=None, alias="hassubFieldRegex")
    scramble_field_fields: Optional[List[StrictStr]] = Field(default=None, alias="scrambleFieldFields")
    date_shift_lowrange: Optional[StrictInt] = Field(default=None, alias="dateShiftLowrange")
    date_shift_highrange: Optional[StrictInt] = Field(default=None, alias="dateShiftHighrange")
    sub_field_list_fields: Optional[List[StrictStr]] = Field(default=None, alias="subFieldListFields")
    sub_field_list_substitute: Optional[List[StrictStr]] = Field(default=None, alias="subFieldListSubstitute")
    sub_field_list_replacement: Optional[StrictStr] = Field(default=None, alias="subFieldListReplacement")
    sub_field_regex_fields: Optional[List[StrictStr]] = Field(default=None, alias="subFieldRegexFields")
    sub_field_regex_regex: Optional[StrictStr] = Field(default=None, alias="subFieldRegexRegex")
    sub_field_regex_replacement: Optional[StrictStr] = Field(default=None, alias="subFieldRegexReplacement")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    __properties: ClassVar[List[str]] = ["id", "userid", "tenantid", "questionnaireid", "hasScrambleField", "hasDateShift", "hassubFieldList", "hassubFieldRegex", "scrambleFieldFields", "dateShiftLowrange", "dateShiftHighrange", "subFieldListFields", "subFieldListSubstitute", "subFieldListReplacement", "subFieldRegexFields", "subFieldRegexRegex", "subFieldRegexReplacement", "createdAt"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TemplatebackendConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TemplatebackendConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "userid": obj.get("userid"),
            "tenantid": obj.get("tenantid"),
            "questionnaireid": obj.get("questionnaireid"),
            "hasScrambleField": obj.get("hasScrambleField"),
            "hasDateShift": obj.get("hasDateShift"),
            "hassubFieldList": obj.get("hassubFieldList"),
            "hassubFieldRegex": obj.get("hassubFieldRegex"),
            "scrambleFieldFields": obj.get("scrambleFieldFields"),
            "dateShiftLowrange": obj.get("dateShiftLowrange"),
            "dateShiftHighrange": obj.get("dateShiftHighrange"),
            "subFieldListFields": obj.get("subFieldListFields"),
            "subFieldListSubstitute": obj.get("subFieldListSubstitute"),
            "subFieldListReplacement": obj.get("subFieldListReplacement"),
            "subFieldRegexFields": obj.get("subFieldRegexFields"),
            "subFieldRegexRegex": obj.get("subFieldRegexRegex"),
            "subFieldRegexReplacement": obj.get("subFieldRegexReplacement"),
            "createdAt": obj.get("createdAt")
        })
        return _obj


