# coding: utf-8

"""
    template backend authentication service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: development@taurusgroup.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class TemplatebackendUser(BaseModel):
    """
    TemplatebackendUser
    """
    id: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = Field(None, alias="firstName")
    last_name: Optional[StrictStr] = Field(None, alias="lastName")
    username: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    roles: Optional[conlist(StrictStr)] = None
    totp_enabled: Optional[StrictBool] = Field(None, alias="totpEnabled")
    created_at: Optional[datetime] = Field(None, alias="createdAt")
    updated_at: Optional[datetime] = Field(None, alias="updatedAt")
    password_changed: Optional[StrictBool] = Field(None, alias="passwordChanged")
    __properties = ["id", "firstName", "lastName", "username", "password", "status", "roles", "totpEnabled", "createdAt", "updatedAt", "passwordChanged"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TemplatebackendUser:
        """Create an instance of TemplatebackendUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TemplatebackendUser:
        """Create an instance of TemplatebackendUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TemplatebackendUser.parse_obj(obj)

        _obj = TemplatebackendUser.parse_obj({
            "id": obj.get("id"),
            "first_name": obj.get("firstName"),
            "last_name": obj.get("lastName"),
            "username": obj.get("username"),
            "password": obj.get("password"),
            "status": obj.get("status"),
            "roles": obj.get("roles"),
            "totp_enabled": obj.get("totpEnabled"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "password_changed": obj.get("passwordChanged")
        })
        return _obj


