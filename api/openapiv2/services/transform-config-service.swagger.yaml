swagger: "2.0"
info:
  title: pt backend
  version: "1.0"
  contact:
    name: pt backend transform configuration service
    url: https://pt-backend.rdeid.unil.ch
    email: development.bdsc@chuv.ch
tags:
  - name: TransformConfigService
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/v1/transform-config:
    get:
      summary: List transform configurations
      description: This endpoint allows listing a user's dataset transform configurations
      operationId: TransformConfigService_ListTransformConfigs
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/templatebackendListTransformConfigsReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: offset
          in: query
          required: false
          type: integer
          format: int64
        - name: limit
          in: query
          required: false
          type: integer
          format: int64
      tags:
        - TransformConfigService
      x-openapi-router-controller: transform_config_controller
    post:
      summary: Create a transform configuration
      description: This endpoint creates a dataset transform configuration
      operationId: TransformConfigService_CreateTransformConfig
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/templatebackendCreateTransformConfigReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/templatebackendCreateTransformConfigRequest'
      tags:
        - TransformConfigService
      x-openapi-router-controller: transform_config_controller
  /api/v1/transform-config/export/json/{id}:
    get:
      summary: 'Export transform configuration as a JSON file '
      description: This endpoint returns a JSON file of a transform configuration (SPHN Connector format)
      operationId: TransformConfigService_ExportTransformConfigJSON
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiHttpBody'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - TransformConfigService
      x-openapi-router-controller: transform_config_controller
  /api/v1/transform-config/export/{id}:
    get:
      summary: Export transform configuration as a string
      description: This endpoint returns a JSON string of a transform configuration (SPHN Connector format)
      operationId: TransformConfigService_ExportTransformConfig
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/templatebackendExportTransformConfigReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - TransformConfigService
      x-openapi-router-controller: transform_config_controller
  /api/v1/transform-config/{id}:
    delete:
      summary: Delete transform configuration
      description: This endpoint deletes a dataset transform configuration
      operationId: TransformConfigService_DeleteTransformConfig
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/templatebackendDeleteTransformConfigReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      tags:
        - TransformConfigService
      x-openapi-router-controller: transform_config_controller
definitions:
  apiHttpBody:
    type: object
    properties:
      contentType:
        type: string
        description: The HTTP Content-Type header value specifying the content type of the body.
      data:
        type: string
        format: byte
        description: The HTTP request/response body as raw binary.
      extensions:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
        description: |-
          Application specific response metadata. Must be set in the first response
          for streaming APIs.
    description: |-
      Message that represents an arbitrary HTTP body. It should only be used for
      payload formats that can't be represented as JSON, such as raw binary or
      an HTML page.


      This message can be used both in streaming and non-streaming API methods in
      the request as well as the response.

      It can be used as a top-level request field, which is convenient if one
      wants to extract parameters from either the URL or HTTP template into the
      request fields and also want access to the raw HTTP body.

      Example:

          message GetResourceRequest {
            // A unique request id.
            string request_id = 1;

            // The raw HTTP body is bound to this field.
            google.api.HttpBody http_body = 2;
          }

          service ResourceService {
            rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);
            rpc UpdateResource(google.api.HttpBody) returns
            (google.protobuf.Empty);
          }

      Example with streaming methods:

          service CaldavService {
            rpc GetCalendar(stream google.api.HttpBody)
              returns (stream google.api.HttpBody);
            rpc UpdateCalendar(stream google.api.HttpBody)
              returns (stream google.api.HttpBody);
          }

      Use of this type only changes how the request and response bodies are
      handled, all other features will continue to work unchanged.
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name whose content describes the type of the
          serialized protocol buffer message.

          For URLs which use the scheme `http`, `https`, or no scheme, the
          following restrictions and interpretations apply:

          * If no scheme is provided, `https` is assumed.
          * The last segment of the URL's path must represent the fully
            qualified name of the type (as in `path/google.protobuf.Duration`).
            The name should be in a canonical form (e.g., leading "." is
            not accepted).
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := ptypes.MarshalAny(foo)
           ...
           foo := &pb.Foo{}
           if err := ptypes.UnmarshalAny(any, foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".


      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  templatebackendCreateTransformConfigReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/templatebackendCreateTransformConfigResult'
  templatebackendCreateTransformConfigRequest:
    type: object
    properties:
      config:
        $ref: '#/definitions/templatebackendTransformConfig'
    title: Create a new transform config
  templatebackendCreateTransformConfigResult:
    type: object
    properties:
      id:
        type: integer
        format: int64
  templatebackendDateShiftConfig:
    type: object
    properties:
      lowrange:
        type: integer
        format: int32
      highrange:
        type: integer
        format: int32
  templatebackendDeleteTransformConfigReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/templatebackendDeleteTransformConfigResult'
  templatebackendDeleteTransformConfigResult:
    type: object
    properties:
      success:
        type: boolean
  templatebackendExportTransformConfigReply:
    type: object
    properties:
      config:
        type: string
  templatebackendListTransformConfigsReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/templatebackendListTransformConfigsResult'
  templatebackendListTransformConfigsResult:
    type: object
    properties:
      config:
        type: array
        items:
          type: object
          $ref: '#/definitions/templatebackendTransformConfig'
  templatebackendScrambleFieldConfig:
    type: object
    properties:
      fields:
        type: array
        items:
          type: string
  templatebackendSubstituteFieldListConfig:
    type: object
    properties:
      name:
        type: string
      field:
        type: string
      substitutionList:
        type: array
        items:
          type: string
      replacement:
        type: string
  templatebackendSubstituteFieldRegexConfig:
    type: object
    properties:
      name:
        type: string
      field:
        type: string
      regex:
        type: string
      replacement:
        type: string
  templatebackendTransformConfig:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      userid:
        type: integer
        format: int64
      tenantid:
        type: integer
        format: int64
      questionnaireid:
        type: integer
        format: int64
      dateShift:
        $ref: '#/definitions/templatebackendDateShiftConfig'
      scrambleField:
        $ref: '#/definitions/templatebackendScrambleFieldConfig'
      subFieldListList:
        type: array
        items:
          type: object
          $ref: '#/definitions/templatebackendSubstituteFieldListConfig'
      subFieldRegexList:
        type: array
        items:
          type: object
          $ref: '#/definitions/templatebackendSubstituteFieldRegexConfig'
      createdAt:
        type: string
        format: date-time
      deletedAt:
        type: string
        format: date-time
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
security:
  - Bearer: []
  - {}
