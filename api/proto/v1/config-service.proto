syntax = "proto3";
package templatebackend;
option go_package = ".;templatebackend";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";
import "config.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "pt backend";
        version: "1.0";
        contact: {
            name: "pt backend configuration for sphn service";
            url: "https://pt-backend.rdeid.unil.ch";
            email: "development.bdsc@chuv.ch";
        };
    };

    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";

    security_definitions: {
        security: {
            key: "Bearer";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "Authorization";
            }
        }
    }

    security: {
        security_requirement: {
            key: "Bearer";
            value: {};
        }
    }
    security: {}
};


// Get all configs for a user

message GetConfigsReply {
    GetConfigsResult result = 1;
}

message GetConfigsResult {
    repeated Config config = 1;
}


message CreateConfigReply {
    CreateConfigResult result = 1;
}

message CreateConfigResult {
    uint32 id = 1;
}

message DeleteConfigRequest {
    uint32 id = 1;
}
message DeleteConfigReply {
    DeleteConfigResult result = 1;
}
message DeleteConfigResult {
    bool success = 1;
}

message ExportConfigRequest {
    uint32 id = 1;
}

message ExportConfigReply {
    string config = 1;
}

service ConfigService {
    rpc GetConfigs(google.protobuf.Empty) returns (GetConfigsReply) {
        option (google.api.http) = {
            get: "/api/rest/v1/configs"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get configuration files";
            description: "This endpoint returns the configuration files for a given user";
            tags: "ConfigurationService";
            extensions: {
                key: "x-openapi-router-controller";
                value {string_value: "config_generator_controller"};
            };
        };
    };

    rpc CreateConfig(Config) returns (CreateConfigReply) {
       option (google.api.http) = {
            post: "/api/rest/v1/configs"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a configuration";
            description: "This endpoint creates a usconfigurationer";
            tags: "ConfigurationService";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "config_generator_controller"};
            };
        };
    };
    // Delete a config entry
    rpc DeleteConfig(DeleteConfigRequest) returns (DeleteConfigReply) {
        option (google.api.http) = {
            delete: "/api/v1/config/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Deletes a config";
            description: "This endpoint deletes a config";
            tags: "ConfigurationService";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "config_generator_controller"};
            };
        };
    };

     rpc ExportConfig(ExportConfigRequest) returns (ExportConfigReply) {
        option (google.api.http) = {
            get: "/api/rest/v1/config/export/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Export a configuration as json (SPHN Connector format)";
            description: "This endpoint returns the JSON of a configuration";
            tags: "ConfigurationService";
            extensions: {
                key: "x-openapi-router-controller";
                value {string_value: "config_generator_controller"};
            };
        };
    };
}
