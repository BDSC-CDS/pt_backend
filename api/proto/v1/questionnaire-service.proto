syntax = "proto3";
package templatebackend;
option go_package = ".;templatebackend";

// import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "questionnaire.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "template backend";
        version: "1.0";
        contact: {
            name: "template backend questionnaire service";
            url: "https://gitlab.itrcs3-app.intranet.chuv/datascience/ds-template-backend";
            email: "dev@chuv.ch";
        };
    };

    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";

    security_definitions: {
        security: {
            key: "Bearer";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "Authorization";
            }
        }
    }

    security: {
        security_requirement: {
            key: "Bearer";
            value: {};
        }
    }
    security: {}
};


// Message definitions for requests and responses
message CreateQuestionnaireRequest {
    Questionnaire questionnaire = 1;
}
message CreateQuestionnaireReply {
    CreateQuestionnaireResult result = 1;
}
message CreateQuestionnaireResult {
    uint32 id = 1;
}

// Message definitions for requests and responses
message CreateQuestionnaireVersionRequest {
    uint32 id = 1;
    QuestionnaireVersion version = 2;
}
message CreateQuestionnaireVersionReply {
    CreateQuestionnaireVersionResult result = 1;
}
message CreateQuestionnaireVersionResult {
    uint32 id = 1;
}

message GetQuestionnaireRequest {
    uint32 id = 1;
}
message GetQuestionnaireReply {
    GetQuestionnaireResult result = 1;
}
message GetQuestionnaireResult {
    Questionnaire questionnaire = 1;
}

message ListQuestionnaireRequest {
    uint32 offset = 1;
    uint32 limit = 2;
}
message ListQuestionnaireReply {
    ListQuestionnaireResult result = 1;
}
message ListQuestionnaireResult {
    repeated Questionnaire questionnaires = 1;
}

message DeleteQuestionnaireRequest {
    string id = 1;
}
message DeleteQuestionnaireReply {
    DeleteQuestionnaireResult result = 1;
}
message DeleteQuestionnaireResult {
    bool success = 1;
}

message CreateReplyRequest {
    QuestionnaireReply reply = 1;
}
message CreateReplyReply {
    CreateReplyResult result = 1;
}
message CreateReplyResult {
    uint32 id = 1;
}

message ListRepliesRequest {
    // uint32 questionnaire_version_id = 1;
    uint32 offset = 2;
    uint32 limit = 3;
}
message ListRepliesReply {
    ListRepliesResult result = 1;
}
message ListRepliesResult {
    repeated QuestionnaireReply replies = 1;
}

message GetReplyRequest {
    // uint32 questionnaire_version_id = 1;
    uint32 id = 1;
}
message GetReplyReply {
    GetReplyResult result = 1;
}
message GetReplyResult {
    QuestionnaireReply reply = 1;
}

// Service definition
service QuestionnaireService {
    rpc CreateQuestionnaire(CreateQuestionnaireRequest) returns (CreateQuestionnaireReply) {
        option (google.api.http) = {
            post: "/api/v1/questionnaire"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a questionnaire";
            description: "This endpoint creates a questionnaire";
            tags: "QuestionnaireService";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "questionnaire_controller"};
            };
        };
    };
    
    rpc CreateQuestionnaireVersion(CreateQuestionnaireVersionRequest) returns (CreateQuestionnaireVersionReply) {
        option (google.api.http) = {
            post: "/api/v1/questionnaire/version"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a questionnaire version";
            description: "This endpoint creates a questionnaire version";
            tags: "QuestionnaireService";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "questionnaire_controller"};
            };
        };
    };

    // Retrieve questionnaire entries for a user
    rpc ListQuestionnaire(ListQuestionnaireRequest) returns (ListQuestionnaireReply) {
        option (google.api.http) = {
            get: "/api/v1/questionnaire"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List questionnaires";
            description: "This endpoint allows listing a user's questionnaires";
            tags: "QuestionnaireService";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "questionnaire_controller"};
            };
        };
    };
    
    // Retrieve questionnaire entries for a user
    rpc GetQuestionnaire(GetQuestionnaireRequest) returns (GetQuestionnaireReply) {
        option (google.api.http) = {
            get: "/api/v1/questionnaire/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get questionnaires";
            description: "This endpoint allow getting a single user's questionnaire";
            tags: "QuestionnaireService";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "questionnaire_controller"};
            };
        };
    };

    // Delete a questionnaire entry
    rpc DeleteQuestionnaire(DeleteQuestionnaireRequest) returns (DeleteQuestionnaireReply) {
        option (google.api.http) = {
            delete: "/api/v1/questionnaire/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a questionnaire";
            description: "This endpoint creates a questionnaire";
            tags: "QuestionnaireService";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "questionnaire_controller"};
            };
        };
    };

    rpc CreateReply(CreateReplyRequest) returns (CreateReplyReply) {
        option (google.api.http) = {
            post: "/api/v1/questionnaire/replies"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create questionnaires reply";
            description: "This endpoint allows ceating a user's questionnaires reply";
            tags: "QuestionnaireService";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "questionnaire_controller"};
            };
        };
    };

    rpc ListReplies(ListRepliesRequest) returns (ListRepliesReply) {
        option (google.api.http) = {
            get: "/api/v1/questionnaire/replies"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List questionnaires replies";
            description: "This endpoint allows listing a user's questionnaires replies";
            tags: "QuestionnaireService";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "questionnaire_controller"};
            };
        };
    };

    rpc GetReply(GetReplyRequest) returns (GetReplyReply) {
        option (google.api.http) = {
            get: "/api/v1/questionnaire/replies/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get a questionnaires reply";
            description: "This endpoint allows getting a user's questionnaires reply";
            tags: "QuestionnaireService";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "questionnaire_controller"};
            };
        };
    };
}