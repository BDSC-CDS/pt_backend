syntax = "proto3";
package templatebackend;
option go_package = ".;templatebackend";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "audit-log.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "pt backend";
        version: "1.0";
        contact: {
            name: "pt backend audit log service";
            url: "https://pt-backend.rdeid.unil.ch";
            email: "development.bdsc@chuv.ch";
        };
    };

    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";

    security_definitions: {
        security: {
            key: "Bearer";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "Authorization";
            }
        }
    }

    security: {
        security_requirement: {
            key: "Bearer";
            value: {};
        }
    }
    security: {}
};


message LogEventResponse {
    bool success = 1;
}

message GetLogsRequest {
    int32 offset = 1;
    int32 limit = 2;
    string filters = 3;
    string sort_by = 4;
}

message GetLogsForUserRequest {
    int32 userid = 1;
    int32 offset = 2;
    int32 limit = 3;
    string filters = 4;
    string sort_by = 5;
}

message GetLogsResponse {
    repeated AuditLog logs = 1;
}




service AuditLogService {
    rpc GetLogs(GetLogsRequest) returns (GetLogsResponse) {
        option (google.api.http) = {
            get: "/api/v1/audit/logs"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get logs";
            description: "Gets a list of logs.";
            tags: "AuditLog";
            extensions: {
                key: "x-openapi-router-controller";
                value {string_value: "audit_log_controller"};
            };
        };
    }

    rpc GetLogsForUser(GetLogsForUserRequest) returns (GetLogsResponse) {
        option (google.api.http) = {
            get: "/api/v1/audit/users/{userid}/logs"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get logs for a user";
            description: "Gets logs for a specific user.";
            tags: "AuditLog";
            extensions: {
                key: "x-openapi-router-controller";
                value {string_value: "audit_log_controller"};
            };
        };
    }
}
