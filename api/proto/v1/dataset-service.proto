syntax = "proto3";
package templatebackend;
option go_package = ".;templatebackend";

import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "dataset.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "pt backend";
        version: "1.0";
        contact: {
            name: "pt backend dataset service";
            url: "https://pt-backend.rdeid.unil.ch";
            email: "development.bdsc@chuv.ch";
        };
    };

    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";

    security_definitions: {
        security: {
            key: "Bearer";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "Authorization";
            }
        }
    }

    security: {
        security_requirement: {
            key: "Bearer";
            value: {};
        }
    }
    security: {}
};



// Create a Dataset
message StoreDatasetRequest {
    string dataset_name = 1;
    string dataset = 2;
    string types = 3;
    string identifiers = 4;
    string is_id = 5;
}

message StoreDatasetReply {
    StoreDatasetResult result = 1;
}
message StoreDatasetResult {
    uint32 id = 1;
}
//List datasets
message ListDatasetsRequest {
    uint32 offset = 1;
    uint32 limit = 2;
}

message ListDatasetsReply {
    ListDatasetsResult result = 1;
}

message ListDatasetsResult {
    repeated Dataset Datasets = 1;
}

//Get dataset info
message GetDatasetInfoRequest {
    uint32 id = 1;
}

message GetDatasetInfoReply {
    Dataset dataset = 1;
}

// get metadata
message GetDatasetMetadataRequest {
    uint32 id = 1;
}

message GetDatasetMetadataReply {
    GetDatasetMetadataResult metadata = 1;
}
message GetDatasetMetadataResult {
    repeated Metadata metadata = 1;
}
// Get dataset
message GetDatasetContentRequest {
    uint32 id = 1;
    int32 offset = 2;
    int32 limit = 3;
}
message GetDatasetContentReply {
    GetDatasetContentResult result = 1;
}

message GetDatasetContentResult {
    repeated Column columns = 1;
    uint32 n_rows = 2;
}

// Get datasetfiltered
message GetDatasetIdentifierRequest {
    uint32 id = 1;
    int32 offset = 2;
    int32 limit = 3;
}

message Column {
    repeated string value = 1;
}
// Delete dataset
message DeleteDatasetRequest {
    uint32 id = 1;
}

message DeleteDatasetReply {
    DeleteDatasetResult result = 1;
}
message DeleteDatasetResult {
    bool success = 1;
}

message TransformDatasetRequest {
    uint32 dataset_id = 1;
    uint32 config_id = 2;
}

message TransformDatasetReply {
    TransformDatasetResult result = 1;
}
message TransformDatasetResult {
    uint32 id = 1;
}

message RevertDatasetRequest {
    uint32 id = 1;
}

message RevertDatasetReply {
    uint32 id = 1;
}

message ChangeTypesDatasetRequest {
    uint32 dataset_id = 1;
    repeated Metadata metadata = 2;
}

message ChangeTypesDatasetReply {
    uint32 id = 1;
}

service DatasetService {
    // Create a dataset
    rpc StoreDataset(StoreDatasetRequest) returns (StoreDatasetReply) {
        option (google.api.http) = {
            post: "/api/v1/dataset"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Store a dataset";
            description: "This endpoint stores a dataset";
            tags: "Dataset";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "dataset_controller"};
            };
        };
    };
    // Retrieve all datasets for a user
    rpc ListDatasets(ListDatasetsRequest) returns (ListDatasetsReply) {
        option (google.api.http) = {
            get: "/api/v1/dataset"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List datasets";
            description: "This endpoint allows listing a user's datasets";
            tags: "Dataset";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "dataset_controller"};
            };
        };
    };

    // Get a dataset's info
    rpc GetDatasetInfo(GetDatasetInfoRequest) returns (GetDatasetInfoReply) {
        option (google.api.http) = {
            get: "/api/v1/dataset/info/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get Dataset Info";
            description: "This endpoint allow getting a specific user's Dataset info";
            tags: "Dataset";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "dataset_controller"};
            };
        };
    };


    // Get a dataset's metadata
    rpc GetDatasetMetadata(GetDatasetMetadataRequest) returns (GetDatasetMetadataReply) {
        option (google.api.http) = {
            get: "/api/v1/dataset/metadata/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get Dataset Metadata";
            description: "This endpoint allow getting a specific user's Dataset Metadata";
            tags: "Dataset";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "dataset_controller"};
            };
        };
    };

    // Get a dataset's content
    rpc GetDatasetContent(GetDatasetContentRequest) returns (GetDatasetContentReply) {
        option (google.api.http) = {
            get: "/api/v1/dataset/content/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get Dataset Content";
            description: "This endpoint allow getting a specific user's Dataset Content";
            tags: "Dataset";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "dataset_controller"};
            };
        };
    };
    
    // Get a dataset's dataframe
    rpc GetDatasetDataframe(GetDatasetContentRequest) returns (google.api.HttpBody) {
        option (google.api.http) = {
            get: "/api/v1/dataset/dataframe/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get Dataset Dataframe";
            description: "This endpoint allow getting a specific user's Dataset as a Pandas Dataframe in Parquet format";
            tags: "Dataset";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "dataset_controller"};
            };
        };
    };

    // Get a dataset's filtered content
    rpc GetDatasetIdentifier(GetDatasetIdentifierRequest) returns (GetDatasetContentReply) {
        option (google.api.http) = {
            get: "/api/v1/dataset/identifier/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get Dataset Content filtered by identifying and quasi identifying columns";
            description: "This endpoint allow getting a specific user's Dataset Content filtered by identifying and quasi identifying columns";
            tags: "Dataset";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "dataset_controller"};
            };
        };
    };

    // Delete a dataset entry
    rpc DeleteDataset(DeleteDatasetRequest) returns (DeleteDatasetReply) {
        option (google.api.http) = {
            delete: "/api/v1/dataset/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Deletes a dataset";
            description: "This endpoint deletes a dataset";
            tags: "Dataset";
            extensions: {
                key: "x-openapi-router-controller";
                value: {string_value: "dataset_controller"};
            };
        };
    };

    // Transform a dataset with a specific configuration
    rpc TransformDataset(TransformDatasetRequest) returns (TransformDatasetReply) {
        option (google.api.http) = {
            post: "/api/v1/dataset/transform"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Transform a dataset";
            description: "This endpoint transforms a dataset";
            tags: "Dataset";
            extensions: {
                key: "x-openapi-router-controller";
                value {string_value: "dataset_controller"};
            };
        };
    };

     // Revert a dataset to its state before transforming
    rpc RevertDataset(RevertDatasetRequest) returns (RevertDatasetReply) {
        option (google.api.http) = {
            post: "/api/v1/dataset/revert"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Revert a dataset";
            description: "This endpoint reverts a dataset";
            tags: "Dataset";
            extensions: {
                key: "x-openapi-router-controller";
                value {string_value: "dataset_controller"};
            };
        };
    };

    //Change the types of a new dataset
    rpc ChangeTypesDataset(ChangeTypesDatasetRequest) returns (ChangeTypesDatasetReply) {
        option (google.api.http) = {
            post: "/api/v1/dataset/types"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Change the types of a dataset";
            description: "This endpoint changes the types of a dataset";
            tags: "Dataset";
            extensions: {
                key: "x-openapi-router-controller";
                value {string_value: "dataset_controller"};
            };
        };
    };
}
