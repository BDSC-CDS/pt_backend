apiVersion: v1
kind: Secret
metadata:
  name: pt-backend-secret
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "pt-backend.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  # Lookup for an existing secret and get existing data
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace "pt-backend-secret") | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}

  # Get user specified values
  {{- $userJwtSecret := .Values.secrets.jwtSecret | default "" }}
  {{- $userAdminToken := .Values.secrets.adminToken | default "" }}
  {{- $userSymmetricKey := .Values.secrets.symmetricEncryptionKey | default "" }}
  {{- $userPtAdminPassword := .Values.secrets.ptAdminPassword | default "" }}

  # Define secrets based on priority: user values → existing secret → generated value
  {{- $jwtSecret := ($userJwtSecret | default (get $secretData "jwt-secret" | default "" | b64dec) | default (randAlphaNum 60)) | b64enc }}
  {{- $adminToken := ($userAdminToken | default (get $secretData "admin-token" | default "" | b64dec) | default (randAlphaNum 16)) | b64enc }}
  {{- $symmetricKey := ($userSymmetricKey | default (get $secretData "symmetric-encryption-key" | default "" | b64dec) | default (randAlphaNum 32)) | b64enc }}
  {{- $ptAdminPassword := ($userPtAdminPassword | default (get $secretData "pt-admin-password" | default "" | b64dec) | default (randAlphaNum 16)) | b64enc }}

  jwt-secret: {{ $jwtSecret }}
  admin-token: {{ $adminToken }}
  symmetric-encryption-key: {{ $symmetricKey }}
  pt-admin-password: {{ $ptAdminPassword }}