apiVersion: v1
kind: Secret
metadata:
  name: psql-secret
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "pt-backend.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  # Lookup for an existing secret and get existing data
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace "psql-secret") | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}

  # Get user specified values
  {{- $userPostgresPassword := .Values.postgresql.secrets.postgresPassword | default "" }}
  
  # Define the postgres password based on priority: user values → existing secret → generated value
  {{- $postgresPassword := (.Values.postgresql.secrets.postgresPassword | default (get $secretData "postgres-password") | default (randAlphaNum 16)) | b64enc }}

  postgres-password: {{ $postgresPassword }}
