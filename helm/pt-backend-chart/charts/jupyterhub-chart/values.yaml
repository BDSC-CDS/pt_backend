####################################
# jupyterhub chart configuration
####################################

# This is to override the chart name.
nameOverride: "jupyterhub"
fullnameOverride: ""

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: registry.rdeid.unil.ch/jupyterhub
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: 
  - name: registry-auth

# This defines the env variables used within the container, which values are stored in the jupyterhub-secrets auto-generated secret
env:
  - name: BACKEND_JWT_SECRET
    valueFrom:
      secretKeyRef:
        name: jupyterhub-secrets
        key: jwt-secret
  - name: ADMIN_TOKEN
    valueFrom:
      secretKeyRef:
        name: jupyterhub-secrets
        key: admin-token
  - name: SYMMETRIC_ENCRYPTION_KEY
    valueFrom:
      secretKeyRef:
        name: jupyterhub-secrets
        key: symmetric-encryption-key

# This is for setting Kubernetes Annotations to a Pod.
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: public
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_clear_headers "Content-Security-Policy";
      add_header content-security-policy "frame-ancestors 'self' http://localhost:3000 https://pt-frontend-test.rdeid.unil.ch" always;
      add_header Access-Control-Allow-Origin "http://localhost:3000 https://pt-frontend-test.rdeid.unil.ch";
  hosts:
    - host: jupyterhub-test.rdeid.unil.ch
      paths:
        - path: /
          pathType: Prefix
  tls:
   - secretName: jupyterhub-tls
     hosts:
       - jupyterhub-test.rdeid.unil.ch

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true
