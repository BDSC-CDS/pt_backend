####################################
# pt-arx-sevice chart configuration
####################################

# This is to override the chart name.
nameOverride: "pt-arx-service"
fullnameOverride: ""

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: ""
  pullSecrets: []
    # - name: ""


config:
  datastore:
    host: arx-postgresql
    port: 5432
    database: 
    username: WRK_ARX
    password: "<password>"



# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# This is to setup the liveness and readiness probes.
# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http


# Deployment specific options
podAnnotations: {}
podLabels: {}
affinity: {}
tolerations: []
nodeSelector: {}
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi






# This is for setting up a service for the pt-backend deployment.
service:
  enabled: true
  type: ClusterIP
  port: 16080
  targetPort: 5000

# This block is for setting up the ingress for the pt-backend.
ingress:
  enabled: true
  host: "pt-backend-test.rdeid.unil.ch"
  tls: false # Secret name should match: {{ .Chart.Name }}-tls
  className: public
  annotations: 
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
  
# This defines the persistence options, allowing to mount a PVC.
persistence:
  enabled: true
  size: 2Gi
  accessMode: ReadWriteOnce
  storageClass: microk8s-hostpath

configOverride:
  daemon:
    public_url: "https://pt-backend-test.rdeid.unil.ch"
  clients:
    jupyterhub:
      host: "https://jupyterhub-test.rdeid.unil.ch/"

####################################
# PostgreSQL subchart configuration
####################################
postgresql:
  fullnameOverride: arx-postgresql
  # This defines the authentication parameters

  secrets: {}
    # postgresPassword: example-password # PostgreSQL won't use this value if the chart was already deployed.
  auth:
    enablePostgresUser: true # Creates a user "postgres" with admin rights.
    existingSecret: psql-secret # Secret should contain the key postgres-password
    database: WRK_ARX

  primary:
    persistence:
      enabled: true