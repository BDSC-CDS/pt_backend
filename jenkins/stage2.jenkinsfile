pipeline {
  agent {
    kubernetes {
      cloud 'kubernetes-int'
      namespace 'jenkins-int-pipeline'
      label "ci-pt-backend-${UUID.randomUUID().toString()}"
      yamlFile "jenkins/agents/unit.yaml"
      defaultContainer 'pt-ubuntu'
    }
  }
  environment{
    componentName = 'pt-backend'
  }
  stages {
    stage('Set version') {
      when {
        not {
          branch 'release/v*'
        }
      }
      steps {
        sh '''#!/bin/bash -xe
          VERSION=$BRANCH_NAME-$BUILD_ID
          VERSION=$(echo "$VERSION" | awk '{print tolower($0)}')
          IMAGE_TAG=$(echo -n ${VERSION//[\\/_]/-})
          RELEASE_NAME="${componentName}-$VERSION"
          RELEASE_NAME=$(echo -n ${RELEASE_NAME//[\\/_]/-})

          echo -n $RELEASE_NAME > $WORKSPACE/release_name
          echo -n $VERSION > $WORKSPACE/version
          echo -n $IMAGE_TAG > $WORKSPACE/image_tag

          echo "VERSION $VERSION"
          echo "IMAGE_TAG $IMAGE_TAG"
          echo "JOB_NAME $JOB_NAME"
          echo "RELEASE_NAME $RELEASE_NAME"
          echo $NODE_NAME
        '''
        script {
          env.VERSION = readFile("$WORKSPACE/version")
          env.IMAGE_TAG = readFile("$WORKSPACE/image_tag")
          env.RELEASE_NAME = readFile("$WORKSPACE/release_name")
        }
      }
    }

    stage('Set release version') {
      when {
        branch 'release/v*'
      }
      steps {
        sh '''#!/bin/bash -xe
          stripped=${BRANCH_NAME#release/v}
          MAJOR=$(echo $stripped | cut -d'.' -f1)
          MINOR=$(echo $stripped | cut -d'.' -f2)
          IMAGE_TAG="v$MAJOR.$MINOR.$BUILD_ID"
          VERSION=v$MAJOR.$MINOR.$BUILD_ID
          VERSION_SEMVER="$VERSION"
          VERSION=$(echo -n "$VERSION" | awk '{print tolower($0)}')
          VERSION=$(echo -n ${VERSION//[\\/_\\.]/-})
          RELEASE_NAME="${componentName}-$VERSION"
          RELEASE_NAME=$(echo -n ${RELEASE_NAME//[\\/_\\.]/-})
          RELEASE_NAME=$(echo "$RELEASE_NAME" | awk '{print tolower($0)}')
          
          echo -n $VERSION > $WORKSPACE/version
          echo -n $VERSION_SEMVER > $WORKSPACE/version_semver
          echo -n $IMAGE_TAG > $WORKSPACE/image_tag
          echo -n $RELEASE_NAME > $WORKSPACE/release_name

          echo $VERSION
        '''
        script {
          env.VERSION = readFile("$WORKSPACE/version")
          env.VERSION_SEMVER = readFile("$WORKSPACE/version_semver")
          env.IMAGE_TAG = readFile("$WORKSPACE/image_tag")
          env.RELEASE_NAME = readFile("$WORKSPACE/release_name")
        }
      }
    }

    stage('Build') {
      steps {
        container(name: 'pt-ubuntu', shell: '/bin/bash') {
          dir('pt-dev-ops') {
            checkout scm
            sh '''
              cd docker
              echo "'""$IMAGE_TAG""'"
              ./build-stage2.sh
            '''
          }
        }
      }
    }

    stage('Test') {
      steps {
        container(name: 'pt-ubuntu', shell: '/bin/bash') {
          dir('pt-dev-ops') {
            checkout scm
            sh '''
              #pip3 install -r requirements.txt
              #python3 -m unittest discover ./src
            '''
          }
        }
      }
    }

    stage('Test CI') {
      stages {
        stage('deploy & test') {
          stages {
            stage('deploy'){
              steps {
                dir('pt-dev-ops') {
                  checkout scm
                  sh '''
                    export env=ci
                    export version="$RELEASE_NAME"
                    cd deploy
                    ./deploy.sh
                    docker version
                    which docker
                  '''
                }
              }
            }
            stage('test') {
              agent {
                docker {
                  image "registry.rdeid.unil.ch/pt-backend:${env.IMAGE_TAG}"
                  registryUrl 'https://registry.rdeid.unil.ch'
                  registryCredentialsId 'pt_registry'
                  alwaysPull true
                }
              }
              steps {
                dir('pt-dev-ops') {
                  checkout scm
                  withCredentials([
                    file([credentialsId: 'kubernetes-in-kubeconfig-file', variable: "KUBECONFIG"]),
                    file([credentialsId: 'registry-auth-docker-config', variable: "DOCKER_CONFIG"]),
                  ]){
                    sh """
                      echo "looking for pod name"
                      POD_NAME=\$(kubectl get pods -n ci -l app=deployment-backend-${RELEASE_NAME} -o jsonpath="{.items[0].metadata.name}")
                      echo "waiting 60sec for pod \$POD_NAME to be ready"
                      kubectl wait --for=condition=ready pod \$POD_NAME -n ci --timeout=60s
                      kubectl -n ci port-forward service/service-backend-${RELEASE_NAME} 5000:5000 &
                      kubectl -n ci logs -f pod/\$POD_NAME &

                      sleep 20

                      mkdir -p ./conf
                      kubectl -n ci exec pod/\$POD_NAME -- cat /pt_backend/conf/config.yaml > ./conf/config.yaml
                      export TEST_CONFIG=\$(realpath ./conf/config.yaml)
                      python3 -m unittest discover ./src/tests/acceptance
                      python3 -m unittest discover ./src/pkg
                      python3 -m unittest discover ./src/internal/cmd/provider
                      python3 -m unittest discover ./src/internal/api/controllers

                    """
                  }
                }
              }
            }
          }
          post {
            always {
              sh '''
                helm uninstall --timeout 60s --namespace ci "${RELEASE_NAME}" || true
              '''
            }
            failure {
              sh '''
                echo no
              '''
            }
          }
        }
      }
    }

    stage("Release") {
      when {
        branch 'release/v*'
      }
      stages {
        stage('Package') {
          steps {
            container(name: 'pt-ubuntu', shell: '/bin/bash') {
              dir('pt-dev-ops') {
                checkout scm
                sh '''
                  HELM_REPO_NAME="charts"
                  HELM_REPO_URL="registry.rdeid.unil.ch"
                  HELM_REPO_GITHUB_URL="ghcr.io/bdsc-cds"
                  HELM_CHART_NAME="pt-backend-chart"
                  HELM_CHART_VERSION="\$VERSION_SEMVER"

                  cp configs/default/values.yaml helm/pt-backend-chart/values.yaml
                  cp configs/default/main.yaml helm/pt-backend-chart/main.yaml

                  helm dependency update helm/pt-backend-chart/

                  # Package the Helm chart
                  helm package helm/pt-backend-chart \
                    --destination . \
                    --version "\$HELM_CHART_VERSION" \
                    --app-version "\$VERSION_SEMVER"

                  # Login to Helm registry (replace with actual credentials or use a secure method)
                  # helm registry login "\$HELM_REPO_URL" --username "your-username" --password "your-password"

                  export HELM_REGISTRY_CONFIG=/pt/pt-deployer/.docker/config.json

                  # Push the Helm chart to the registry
                  helm push "\$HELM_CHART_NAME-\$HELM_CHART_VERSION.tgz" "oci://\$HELM_REPO_URL/\$HELM_REPO_NAME"
                  helm push "\$HELM_CHART_NAME-\$HELM_CHART_VERSION.tgz" "oci://\$HELM_REPO_GITHUB_URL/\$HELM_REPO_NAME"
                '''
              }
            }
          }
        }
      }
    }

    stage('Master') {
      when {
        branch 'master'
      }
      stages {
        stage('Deploy') {
          steps {
            container(name: 'pt-ubuntu', shell: '/bin/bash') {
              dir('pt-dev-ops') {
                checkout scm
                sh """
                  export env=int
                  export RELEASE_NAME="${componentName}-int-master"
                  export version="$BRANCH_NAME"
                  cd deploy
                  ./deploy.sh
                """
              }
            }
          }
        }
      }
    }
  }
}
