pipeline {
  agent {
    kubernetes {
      cloud 'kubernetes-int'
      namespace 'jenkins-int-pipeline'
      label "ci-ds-cicd-template-backend-${UUID.randomUUID().toString()}"
      yamlFile "jenkins/agents/unit.yaml"
    }
  }
  environment{
    componentName = 'template_backend'
  }
  stages {
    stage('Set version') {
      when {
        not {
          branch 'release/v*'
        }
      }
      steps {
        sh '''#!/bin/bash -xe
          VERSION=$BRANCH_NAME-$BUILD_ID
          echo -n $VERSION > $WORKSPACE/version
          echo -n ${VERSION//\\//-} > $WORKSPACE/image_tag
          echo -n $VERSION
          echo JOB_NAME $JOB_NAME
          RELEASE_NAME="${componentName}_$VERSION"
          echo -n ${RELEASE_NAME//\\//-} > $WORKSPACE/release_name
          echo "RELEASE_NAME $RELEASE_NAME"
        '''
        script {
          env.VERSION = readFile("$WORKSPACE/version")
          env.IMAGE_TAG = readFile("$WORKSPACE/image_tag")
          env.RELEASE_NAME = readFile("$WORKSPACE/release_name")
        }
      }
    }

    stage('Set release version') {
      when {
        branch 'release/v*'
      }
      steps {
        sh '''#!/bin/bash -xe
          stripped=${BRANCH_NAME#release/v}
          MAJOR=$(echo $stripped | cut -d'.' -f1)
          MINOR=$(echo $stripped | cut -d'.' -f2)
          VERSION=v$MAJOR.$MINOR.$BUILD_ID
          echo $VERSION > $WORKSPACE/version
          echo ${VERSION//\\//-} > $WORKSPACE/image_tag
          echo $VERSION
        '''
        script {
          env.VERSION = readFile("$WORKSPACE/version")
          env.IMAGE_TAG = readFile("$WORKSPACE/image_tag")
        }
      }
    }

    stage('Build') {
      steps {
        container(name: 'ds-ubuntu', shell: '/bin/bash') {
          dir('ds-dev-ops') {
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'PYPI_SERVER_USERNAME_PASSWORD', usernameVariable: 'PYPI_USERNAME', passwordVariable: 'PYPI_PASSWORD']]) {
              checkout scm
              sh '''
                cd docker
                ./build-stage2.sh
              '''
            }
          }
        }
      }
    }

    stage('Test CI') {
      when {
        branch 'feat/ci'
      }
      stages {
        stage('Deploy') {
          container(name: 'ds-ubuntu', shell: '/bin/bash') {
            steps {
              dir('ds-dev-ops') {
                checkout scm
                sh '''
                  export env=ci
                  cd deploy
                  ./deploy.sh
                '''
              }
            }
            post {
              always {
                sh '''
                  helm uninstall --timeout 60s --namespace ci "${RELEASE_NAME} || true"
                '''
              }
              failure {
                sh '''
                  echo nooo
                '''
              }
            }
          }
        }
      }
    }
    
    // stage('Test') {
    //   steps {
    //     container(name: 'ds-ubuntu', shell: '/bin/bash') {
    //       dir('ds-dev-ops') {
    //         checkout scm
    //         sh '''
    //           cd docker
    //           ./build-stage2.sh
    //         '''
    //       }
    //     }
    //   }
    // }

    stage('Master') {
      when {
        branch 'master'
      }
      stages {
        stage('Deploy') {
          steps {
            container(name: 'ds-ubuntu', shell: '/bin/bash') {
              dir('ds-dev-ops') {
                checkout scm
                sh '''
                  cd deploy
                  ./deploy.sh
                '''
              }
            }
          }
        }
      }
    }
    
    
  }
}
